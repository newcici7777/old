{"/pages/android/old/thread_warning_list/": {
    "title": "Thread Warning list",
    "keywords": "",
    "url": "/pages/android/old/thread_warning_list/",
    "body": "DB TABLE: SECURITY_INFO :記錄所有log SECURITY_SEARCH :記錄搜尋log的時間 SECURITY_INFO TABLE的欄位 Id主鍵 TIMESTAMP DEV_UUID PROFILE_ID CLIENT_MAC CLIENT_IP EVENT_CLASS EVENT_TYPE AGGREGATE_COUNT DIR REMOTE_IP CATEGORY_INDEX REMOTE_URL COUNTRY_CODE REMOTE_URL_SCHEME REMOTE_URL_HOST REMOTE_URL_PORT REMOTE_URL_PATH REMOTE_URL_QUERY FILE_NAME MD5 MALWARE_GROUP SID READ SEARCH_TYPE 詳情請見eventLog.pptx https://drive.google.com/file/d/1UgQo1pkz947q0hhc1F1yA5OvAA6zNHAr/view?usp=sharing 參見EXAMPLE5 https://drive.google.com/file/d/1mJC0xgmwtUAl0BwdnUnUgmqkEVoJ43EF/view Cloud API: 參考EXAMPLE5 https://drive.google.com/file/d/1mJC0xgmwtUAl0BwdnUnUgmqkEVoJ43EF/viewLOG_SEARCH_URL = \"https://api-alpha.mas.zyxelonline.com/v1/devices/logs/search\"; String json = \"{\\\"start_time\\\":1526860801,\\\"end_time\\\":1526947199,\\\"query\\\":{\\\"dev-uuid\\\":\\\"550e8400-e29b-41d4-a716-446655440000\\\",\\\"event-class\\\": [\\\"threat\\\"]}, \\\"size\\\": 100}\"; Search_after意指下次搜尋的timestamp 排序方式由Timestamp數字大到數字小 圖1 圖2 SECURITY_SEARH(DB_TABLE1) 主要記錄搜尋的Timestatmp 圖3 將小的Timestamp(圖2的3)放入”Start”欄位，大的Timestamp+1(圖1的2)放入”END”欄位 START=小 END=大 1 2 3 4 5 6 7 8 /** * @param eventMsg json的資料 * @param mac 針對Threat&amp;Warning List的功能，mac只要帶null就好。給Mac的功能是給針對某個Device撈出此Device的Threat&amp;Warning * @param isAfter 若使用者有下滑，參數才會帶true,不然一開始進去Threat&amp;Warning List的頁面，是帶false * @return */ private List&lt;IType&gt; getGroupList(String eventMsg,String mac, boolean isAfter) { } 尋找json中的SearchAfter的值(圖1的1)，若找不到就回-1代表沒下一頁資料 1 private long getSearchAfter(String eventMsg) {} SecuritySearchRepo.java 1 2 3 4 5 6 /** * 檢查是否有搜尋過 * @param searchAfter * @return */ public SecuritySearch checkIsExistPre(long searchAfter){} 撈資料前會代入SearchAfter的值(圖1的1)，檢查SECURITY_SEARH(DB_TABLE1)是否之前已經搜尋過 1 where type=? and start &lt;= ? and end &gt; ? and dev_uuid = ? order by start desc 第一個參數可以代threat/warning 第二個參數及第三個參數代入SearchAfter的值(圖1的1) HistoryPresenter.java主要程式碼說明 CASE1:沒有下一頁,searchAfter是-1 (1)資料庫有存過此SearchAfter-1(程式碼1#418) 檢查log中第0筆(最大)資料的timestamp是不是比存在資料庫的End那筆還大(程式碼1#427) 若是的話，要做二件事 A.要把END值修正成json的第0筆(程式碼1#437,#439) B.並把log中所有大於資料庫的End那筆還大的資料全insert到SECURITY_INFO的TABLE(程式碼1#428~#436) C.將A的條件帶進資料庫去搜SECURITY_INFO，並把搜尋到的資料Load到UI呈現(程式碼1#441~#451) 程式碼1 (2)若沒有撈到之前有搜尋過的SearchAfter，就把資料新增至SECURITY_INFO以及把-1塞到Start與第0筆資料timestamp(End)insert至SECURITY_SEARCH(程式碼1#457)(#489) Load資料給UI呈現，從SECURITY_SEARCH中的Start跟End還有DEV_UUID的欄位作為參數去撈取SECURITY_INFO的資料(程式碼2#491~#500) 程式碼2 ![img](/assets/img/android/old/paging5.png) CASE2:有下一頁,SearchAfter不是-1 (1)資料庫有存過此SearchAfter 檢查log中第0筆(最大)資料的timestamp是不是比存在資料庫的End那筆還大(程式碼3#230~#235) 若是的話，要做三件事 A.新增一筆資料至SECURITY_SEARCH，START為”存在資料庫的End的欄位”,END為log第0筆的timestamp+1(新增前檢查是否資料庫已經存在這筆，沒存在才新增)(程式碼3#247~#248,程式碼3#257) B.並把log中所有大於資料庫的End那筆還大的資料全insert到SECURITY_INFO的TABLE(程式碼3#236~#243) C.將A的條件帶進資料庫去搜SECURITY_INFO，並把搜尋到的資料Load到UI呈現(程式碼4#289,程式碼5) 將小於SearchAfter的資料全搜尋出來。(程式碼3#262~#266) Load有連續性的資料給UI呈現 以下的function主要是去Load有連續性的資料給UI作呈現 1 public void LoadDB(List&lt;SecuritySearch&gt; searchList) {} 程式碼3 程式碼4 程式碼5 (2)資料庫沒有存過此SearchAfter 還沒下滑(isAfter=false) A.新增一筆資料至SECURITY_SEARCH，START為這一次的SearchAfter,END為Log的第0筆timestamp+1(程式碼2#489) 已下滑(isAfter=true) B.新增一筆資料至SECURITY_SEARCH，START為這一次的SearchAfter,END為前一個的Before SearchAfter(程式碼2#489) Load資料給UI呈現，從SECURITY_SEARCH中的Start跟End還有DEV_UUID的欄位作為參數去撈取SECURITY_INFO的資料(程式碼2#491~#500) 其它程式碼說明 1、關於LoadDB的Function 參見程式碼4 圖4 將以上三筆資料代入程式碼4 若下一筆資料的END欄位的值與上一筆資料的START欄位的值為相同(程式碼4#283~285)，代表第一筆與第二筆的搜尋資料是連續性的，就繼續跑完整個迴圈(程式碼4#293~#295) 若下一筆資料的END欄位的值與上一筆資料的START欄位的值不為相同(程式碼4#287~#290)，就直接讀完資料後跳出迴圈，不用去Load不連續的資料。 2.關於資料的尾巴是要呈現轉圈圈還是”資料已經置底” 程式碼6 (1)若SearchAfter為-1就代表沒下一頁資料(程式碼6#521)，將groupList的資料尾端加上FinishType的物件。知道這是最後一筆 (2)若SearchAfter不為-1就代表還有下一頁資料，將groupList的尾端塞入LoadingType的物件，知道要顯示轉轉轉的圖示。 3. 程式碼7 把Log的資料，依據年月日分分類。(程式碼7#334~#341) 最後再把資料組成一個有日期有Log的List(程式碼7#344~349) 呈現過後的資料會長的像下面 判斷是那種類型 GET_THREAT_WARNING_LIST_AFTER=針對Threat&amp;Waring有下一頁的資料進行處理(程式碼8#149) GET_THREAT_WARNING_LIST=針對Threat&amp;Waring沒有下一頁的資料進行處理(程式碼8#153) GET_DEVICE_THREAT_WARNING_LIST_AFTER=針對DEVICE Threat&amp;Waring有下一頁的資料進行處理(程式碼8#159) GET_DEVICE_THREAT_WARNING_LIST=針對DEVICE Threat&amp;Waring沒有下一頁的資料進行處理(程式碼8#166) 程式碼8 HistoryAdapter.java主要程式碼說明 取得資料的EVENT-TYPE/CATEGORY_INDEX作為分辯，參考詳情請見eventLog.pptx https://drive.google.com/file/d/1UgQo1pkz947q0hhc1F1yA5OvAA6zNHAr/view?usp=sharing 程式碼9 程式碼10"
  },"/pages/android/old/app_update/": {
    "title": "app update",
    "keywords": "",
    "url": "/pages/android/old/app_update/",
    "body": "更新的過程 下載 安裝 在Gradle放上 // in app update implementation 'com.google.android.play:core:1.6.3’ 1.使用AppUpdateManager檢查是否有新版本可以更新 1 2 3 private AppUpdateManager appUpdateManager; private Task&lt;AppUpdateInfo&gt; appUpdateInfoTask; private static final int REQUEST_APP_UPDATE = 1234; 2.如果有更新的版本，會回傳一個AppUpdateInfo 3.檢查完能否更新後，使用AppUpdateManager.startUpdateFlowForResult()啟動update，有二種啟動更新的方式，分別為AppUpdateType.FLEXIBLE與AppUpdateType.IMMEDIATE 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 private void checkAppUpdate() { // Creates instance of the manager. appUpdateManager = AppUpdateManagerFactory.create(this); appUpdateManager.registerListener(installStateUpdatedListener); // Returns an intent object that you use to check for an update. appUpdateInfoTask = appUpdateManager.getAppUpdateInfo(); // Checks that the platform will allow the specified type of update. appUpdateInfoTask.addOnSuccessListener(appUpdateInfo -&gt; { int isAvailable = appUpdateInfo.updateAvailability(); int avalible_version_code = appUpdateInfo.availableVersionCode(); if(appUpdateInfo.updateAvailability() == UpdateAvailability.UPDATE_AVAILABLE &amp;&amp; appUpdateInfo.isUpdateTypeAllowed(IMMEDIATE)) {//更新 try { // Or 'AppUpdateType.FLEXIBLE' for flexible updates. appUpdateManager.startUpdateFlowForResult( appUpdateInfo, AppUpdateType.IMMEDIATE, this, REQUEST_APP_UPDATE); } catch (IntentSender.SendIntentException e) { e.printStackTrace(); } } else{ //不需要更新 checkPopupAd(); } }); } Flexible: A user experience that provides background download of the update and at the same time no interruption on seamless use of the app. Flexible update is most useful when you integrated a new feature which is not core to your app. Immediate: This is the flow where a blocking UI is prompted by google until the update is download and installed. Immediate update is most useful when there is bug in the production version. However Android allows you to handle any of the two update types for every version of your app, so it’s up to you how to handle. 4.appUpdateInfo.updateAvailability()會回傳四種狀態 UNKNOWN UPDATE_AVAILABLE UPDATE_NOT_AVAILABLE DEVELOPER_TRIGGERED_UPDATE_IN_PROGRESS 5.處理Fail或取消更新(在AppUpdateType.FLEXIBLE的情況下) 1 2 3 4 5 6 7 8 9 10 11 12 13 @Override protected void onActivityResult(int requestCode, int resultCode, Intent data) { if(requestCode == REQUEST_APP_UPDATE){ if(resultCode != RESULT_OK){ if(resultCode == RESULT_CANCELED){//取消更新 checkPopupAd(); }else if(resultCode == ActivityResult.RESULT_IN_APP_UPDATE_FAILED){//更新失敗 checkAppUpdate(); } } } } 6.處理下載到一半以及更新到一半，使用者關掉或滑掉重啟。 若更新的狀態為UpdateAvailability.DEVELOPER_TRIGGERED_UPDATE_IN_PROGRESS，則重新啟動AppUpdateManager.startUpdateFlowForResult()，但參數一定要代AppUpdateType.IMMEDIATE，代表先前使用者是按下要更新，讓更新的程式繼續下去。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 @Override protected void onResume() { super.onResume(); if (BuildConfig.IN_APP_UPDATE) { appUpdateInfoTask.addOnSuccessListener(appUpdateInfo -&gt; { if (appUpdateInfo.updateAvailability() == UpdateAvailability.DEVELOPER_TRIGGERED_UPDATE_IN_PROGRESS) {//之前沒更新到一半就關掉了 try { appUpdateManager.startUpdateFlowForResult( appUpdateInfo, IMMEDIATE, this, REQUEST_APP_UPDATE); } catch (IntentSender.SendIntentException e) { e.printStackTrace(); } } else if (appUpdateInfo.installStatus() == InstallStatus.DOWNLOADED) {//確認已經完成更新 popRestartAppDialog(); } }); } } 7.關於Immediate Update 針對AppUpdateType.FLEXIBLE，若下載完檔案，跳出一個Dialog告知使用者更新完成後會重新啟動APP 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 InstallStateUpdatedListener installStateUpdatedListener = new InstallStateUpdatedListener() { @Override public void onStateUpdate(InstallState state) { if (state.installStatus() == InstallStatus.DOWNLOADED){ popRestartAppDialog(); } else if (state.installStatus() == InstallStatus.INSTALLED){ if (appUpdateManager != null){ appUpdateManager.unregisterListener(installStateUpdatedListener); } } else { Log.i(TAG, \"InstallStateUpdatedListener: state: \" + state.installStatus()); } } }; private void popRestartAppDialog(){ AlertDialog alertDialog = new AlertDialog.Builder(this, R.style.MyAlertDialogStyle) .setCancelable(false) .setMessage(\"Installation is ready and confirmation to restart the app.\") .setPositiveButton(R.string.alert_yes, (DialogInterface dialogInterface, int i) -&gt; { appUpdateManager.completeUpdate();//重新啟動app }).create(); alertDialog.show(); } 8.測試時，必須先去Google Play Store下載APK(Production)，然後修改Gradle的Version Code比Google Play Store還舊，再安裝至手機中。 In-app updates are available only to user accounts that own the app. So, make sure the account you’re using has downloaded your app from Google Play at least once before using the account to test in-app updates. Make sure that the app that you are testing in-app updates with has the same application ID and is signed with the same signing key as the one available from Google Play. Because Google Play can only update an app to a higher version code, make sure the app you are testing as a lower version code than the update version code. 參考資料： https://developer.android.com/guide/app-bundle/in-app-updates https://medium.com/android-dev-hacks/in-app-updates-api-by-google-for-android-why-and-when-its-going-to-be-useful-how-to-properly-4578df9e9b3"
  },"/pages/android/old/black_white_list/": {
    "title": "black white list",
    "keywords": "",
    "url": "/pages/android/old/black_white_list/",
    "body": "增加黑白名單 HistoryDetailActivity.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 @OnClick({R.id.backbtn, R.id.forbiden_btn, R.id.add_img}) public void onViewClicked(View view) { switch (view.getId()) { case R.id.backbtn: onBackPressed(); break; case R.id.add_img://跟下面是做相同的事情 case R.id.forbiden_btn: showLoadView(); EventType eventType = EventType.fromStr(securityInfo.getEventType()); SecurityType securityType = SecurityType.fromStr(securityInfo.getEventClass()); if (securityType == SecurityType.THREAT) { switch (eventType) { case AV: mXmppController.setAVWhiteList(securityInfo.getMd5(), securityInfo.getFileName()); break; case IR: mXmppController.setIRWhiteList(securityInfo.getRemotIP()); break; case IPS: mXmppController.setIPSWhiteList(securityInfo.getSid(), eventlog_category); break; case WSB: mXmppController.setWSBWhiteList(securityInfo.getRemoteURL()); break; default: } } else if (securityType == SecurityType.WARNING) { switch (eventType) { case IPS: mXmppController.setIPSBlackList(securityInfo.getSid(), eventlog_category); break; case WSB: mXmppController.setWSBBlackList(securityInfo.getRemoteURL()); break; case IR: mXmppController.setIRBlackList(securityInfo.getRemotIP()); break; default: } } } } BlackWhiteGroup.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 public class BlackWhiteGroup implements Serializable { private String title; private boolean isChecked;//是否有checkbox可以按 private EventType eventType;//屬於av/ips/ir/wsb private EnumBlackWhite blackWhiteEnum;//是白名單white還是黑名單black private boolean isExpend;//是否展開 public boolean isExpend() { return isExpend; } public void setExpend(boolean expend) { isExpend = expend; } private List&lt;BlackWhiteItem&gt; list = new ArrayList&lt;&gt;(); public List&lt;BlackWhiteItem&gt; getList() { return list; } public void addItem(BlackWhiteItem item) { list.add(item); } public void clearList(){ list.clear(); } public String getTitle() { return title; } public void setTitle(String title) { this.title = title; } public boolean isChecked() { return isChecked; } public void setChecked(boolean checked) { isChecked = checked; } public EventType getEventType() { return eventType; } public void setEventType(EventType eventType) { this.eventType = eventType; } public EnumBlackWhite getBlackWhiteEnum() { return blackWhiteEnum; } public void setBlackWhiteEnum(EnumBlackWhite blackWhiteEnum) { this.blackWhiteEnum = blackWhiteEnum; } public int getSize() { return list.size(); } } BlackWhiteListActivity.java 讀取白名單 1 mXmppController.getCyberSecurityInfo(true); 共用的 1 StructCyberSecurity structCyberSecurity = (StructCyberSecurity) notifyXmppEvent.getresponseData(); AV 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 if (mBlackWhiteEnum == EnumBlackWhite.WHITE) { ArrayList&lt;StructMd5WhiteListElement&gt; avBlackWhiteList = structCyberSecurity.mAntiVirus.mMd5WhiteList; BlackWhiteGroup avWhiteList = new BlackWhiteGroup(); avWhiteList.setBlackWhiteEnum(EnumBlackWhite.WHITE); avWhiteList.setEventType(EventType.AV); for (StructMd5WhiteListElement avElement : avBlackWhiteList) { BlackWhiteItem item = new BlackWhiteItem(); item.setDesc(avElement.getFileDescription()); item.setItem_name(avElement.getMd5()); item.setEventType(EventType.AV); item.setEnumBlackWhite(EnumBlackWhite.WHITE); avWhiteList.addItem(item); } if (avWhiteList.getSize() &gt; 0) mGroupList.add(avWhiteList); } IR 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 ArrayList&lt;StructIrBlackWhiteListElement&gt; irBlackWhiteList = structCyberSecurity.mIpReputation.mIrBlackWhiteList; BlackWhiteGroup irWhiteList = new BlackWhiteGroup(); irWhiteList.setBlackWhiteEnum(EnumBlackWhite.WHITE); irWhiteList.setEventType(EventType.IR); BlackWhiteGroup irBlackList = new BlackWhiteGroup(); irBlackList.setBlackWhiteEnum(EnumBlackWhite.BLACK); irBlackList.setEventType(EventType.IR); for (StructIrBlackWhiteListElement irElement : irBlackWhiteList) { BlackWhiteItem item = new BlackWhiteItem(); item.setItem_name(irElement.getIp()); item.setEventType(EventType.IR); EnumTypeOfSignature type = irElement.getTypeOfIp(); if (type == EnumTypeOfSignature.ENUM_WHITE_LIST) { item.setEnumBlackWhite(EnumBlackWhite.WHITE); irWhiteList.addItem(item); } else if (type == EnumTypeOfSignature.ENUM_BLACK_LIST) { item.setEnumBlackWhite(EnumBlackWhite.BLACK); irBlackList.addItem(item); } } if (irBlackList.getSize() &gt; 0 &amp;&amp; mBlackWhiteEnum == EnumBlackWhite.BLACK) mGroupList.add(irBlackList); if (irWhiteList.getSize() &gt; 0 &amp;&amp; mBlackWhiteEnum == EnumBlackWhite.WHITE) mGroupList.add(irWhiteList); IPS 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 ArrayList&lt;StructIpsBlackWhiteListElement&gt; ipsBlackWhiteList = structCyberSecurity.mIps.mIpsBlackWhiteList; BlackWhiteGroup ipsBlackList = new BlackWhiteGroup(); ipsBlackList.setBlackWhiteEnum(EnumBlackWhite.BLACK); ipsBlackList.setEventType(EventType.IPS); BlackWhiteGroup ipsWhiteList = new BlackWhiteGroup(); ipsWhiteList.setBlackWhiteEnum(EnumBlackWhite.WHITE); ipsWhiteList.setEventType(EventType.IPS); for (StructIpsBlackWhiteListElement ipsElement : ipsBlackWhiteList) { BlackWhiteItem item = new BlackWhiteItem(); EnumTypeOfSignature type = ipsElement.getTypeOfSignature(); item.setEventType(EventType.IPS); item.setItem_name(ipsElement.getSignatureId()); item.setDesc(ipsElement.getSignatureDescription()); LogUtil.d(TAG, \"signatureid:\" + ipsElement.getSignatureId() + \"/\" + ipsElement.getSignatureDescription()); if (type == EnumTypeOfSignature.ENUM_WHITE_LIST) { item.setEnumBlackWhite(EnumBlackWhite.WHITE); ipsWhiteList.addItem(item); } else if (type == EnumTypeOfSignature.ENUM_BLACK_LIST) { item.setEnumBlackWhite(EnumBlackWhite.BLACK); ipsBlackList.addItem(item); } } if (ipsBlackList.getSize() &gt; 0 &amp;&amp; mBlackWhiteEnum == EnumBlackWhite.BLACK) mGroupList.add(ipsBlackList); if (ipsWhiteList.getSize() &gt; 0 &amp;&amp; mBlackWhiteEnum == EnumBlackWhite.WHITE) mGroupList.add(ipsWhiteList);"
  },"/pages/android/old/login/": {
    "title": "login",
    "keywords": "",
    "url": "/pages/android/old/login/",
    "body": "只裝Multy，就用multy的share data 只裝Armor，就用Armor的share data 若二個App同時都有裝 先判斷Armor/Multy誰的Expired_timestamp最接近現在日期，就讀取及寫入那個app的share data 判斷要用那個Presenter 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 public void setListener(WeakReference&lt;Context&gt; mWeakContext) { isMultyAppExist = APPUtils.isAppExist(mWeakContext, BuildConfig.MULTY_PACKAGE); isArmorAppExist = APPUtils.isAppExist(mWeakContext, BuildConfig.ARMOR_PACKAGE); shareDataContentProvider = ShareDataContentProvider.getmInstance(); if (isMultyAppExist &amp;&amp; isArmorAppExist) {//armor與multy同時存在 long armor_accesstoken_expire_value = 0l; long multy_accesstoken_expire_value = 0l; Map&lt;String, String&gt; multy_sharedata = shareDataContentProvider.Query(BuildConfig.MULTY_CONTENT_PROVIDER); if (multy_sharedata != null &amp;&amp; multy_sharedata.size() &gt; 0) { multy_accesstoken_expire_value = TextUtils.isEmpty(multy_sharedata.get(ACCESS_TIMESTAMP)) ? 0l : Long.valueOf(multy_sharedata.get(ACCESS_TIMESTAMP)); } Map&lt;String, String&gt; armor_sharedata = shareDataContentProvider.Query(BuildConfig.ARMOR_CONTENT_PROVIDER); if (armor_sharedata != null &amp;&amp; armor_sharedata.size() &gt; 0) { armor_accesstoken_expire_value = TextUtils.isEmpty(armor_sharedata.get(ACCESS_TIMESTAMP)) ? 0l : Long.valueOf(armor_sharedata.get(ACCESS_TIMESTAMP)); } //如果先裝Armor，再裝Multy，在下一個refresh token過期之前，二個expire time都會是一樣的，目前先預設都一樣就打開multy if (armor_accesstoken_expire_value &gt; multy_accesstoken_expire_value) { lastOpenApp = SecurityConstant.SupportApp.Armor; AppData.setData(SecurityConstant.SHARE_DATA_URI, BuildConfig.ARMOR_CONTENT_PROVIDER); } else if (armor_accesstoken_expire_value == multy_accesstoken_expire_value) {//二個expire time相等 lastOpenApp = SecurityConstant.SupportApp.Multy; AppData.setData(SecurityConstant.SHARE_DATA_URI, BuildConfig.MULTY_CONTENT_PROVIDER); } else { lastOpenApp = SecurityConstant.SupportApp.Multy; AppData.setData(SecurityConstant.SHARE_DATA_URI, BuildConfig.MULTY_CONTENT_PROVIDER); } } else if (isMultyAppExist &amp;&amp; !isArmorAppExist) { lastOpenApp = SecurityConstant.SupportApp.Multy; AppData.setData(SecurityConstant.SHARE_DATA_URI, BuildConfig.MULTY_CONTENT_PROVIDER); } else if (!isMultyAppExist &amp;&amp; isArmorAppExist) { lastOpenApp = SecurityConstant.SupportApp.Armor; AppData.setData(SecurityConstant.SHARE_DATA_URI, BuildConfig.ARMOR_CONTENT_PROVIDER); } else { //multy跟armor都沒裝 } } LoginPresenter.java 解釋getMultySite這個function在做什麼 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 private PairedDeviceInfo getMultySite(List&lt;PairedDeviceInfo&gt; pairedDeviceInfoArrayList) { LogUtil.d(TAG, \"paired list size:\" + pairedDeviceInfoArrayList.size() + \"/paired list:\" + pairedDeviceInfoArrayList.toString()); PairedDeviceInfo pairedDeviceInfo = null; if (isMultyAppExist || isArmorAppExist) {//先判斷Multy或Armor是否有存在 LogUtil.d(TAG, \"1.multy is exist\"); String focusMac = AppData.getData(SecurityConstant.FOCUS_MAC);//判斷是否有FocusMac(由multy或armor的share Data取出) LogUtil.d(TAG, \"1.1FOCUS_MAC:\" + focusMac); if (!APPUtils.ISNULL(focusMac)) { if (pairedDeviceInfoArrayList != null &amp;&amp; pairedDeviceInfoArrayList.size() &gt; 0) { for (PairedDeviceInfo info : pairedDeviceInfoArrayList) {//繞行Cloud的paired Device //檢查paired 的Mac跟focus Mac是相同，且型號是50/60/7815/6818 if (info.getMacAddress().equals(focusMac) &amp;&amp; APPUtils.ISCorrectModel(info.getModelName())) { LogUtil.d(TAG, \"1.2有找到paired DeviceInfo:\" + info); pairedDeviceInfo = info; break;//找到 跳出 } } } else { //multy db 有，但pcloud沒有 } } else { //有裝multy 但沒有focus site } } if (pairedDeviceInfo == null) {//找不到的話，代表可能有裝multy或armor但沒有paired過 LogUtil.d(TAG, \"4.0沒裝multy/armor跑以下\"); LogUtil.d(TAG, \"4.1有裝 multy但 focus site不是wsq50或wsq60也會跑下面這一段\"); LogUtil.d(TAG, \"4.1有裝 armor但 focus site不是nbg6818或nbg7815也會跑下面這一段\"); if (pairedDeviceInfoArrayList != null &amp;&amp; pairedDeviceInfoArrayList.size() &gt; 0) { for (PairedDeviceInfo info : pairedDeviceInfoArrayList) {//繞行paired的device LogUtil.d(TAG,\"4.1.1 get model:\"+info.getModelName()); if(lastOpenApp !=null) {//最後一次打開的app若是null就代表沒裝multy跟armor if (lastOpenApp == SecurityConstant.SupportApp.Multy) {//最後一次打開的是multy if (APPUtils.ISMultyModel(info.getModelName())) {//cloud paired device是否為multy AppData.setData(SecurityConstant.FOCUS_MAC, info.getMacAddress()); LogUtil.d(TAG, \"4.1.2 multy getMultySite:\" + info); pairedDeviceInfo = info;//若有抓到一台，就直接用第0台 break; } } else if (lastOpenApp == SecurityConstant.SupportApp.Armor) {//最後一次打開的是armor if (APPUtils.ISArmorModel(info.getModelName())) {//cloud paired device是否為armor AppData.setData(SecurityConstant.FOCUS_MAC, info.getMacAddress()); LogUtil.d(TAG, \"4.1.2 armor getMultySite:\" + info); pairedDeviceInfo = info;//若有抓到一台，就直接用第0台 break; } } }else{ //multy 跟armor 二個app都沒有裝 if (APPUtils.ISCorrectModel(info.getModelName())) { AppData.setData(SecurityConstant.FOCUS_MAC, info.getMacAddress()); LogUtil.d(TAG, \"4.1.2getMultySite:\" + info); pairedDeviceInfo = info;//若有抓到一台，就直接用第0台 break; } } } } if (pairedDeviceInfo == null) { LogUtil.d(TAG, \"pcloud也沒multy50/60/6818/7815 site，去買 multy\"); loginView.dismissLoadView(); loginView.goToBuyMultyPage(); } } return pairedDeviceInfo; } BaseActivity.java 判斷是否換Site重連 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 @Override protected void onResume() { super.onResume(); /** * determine what is the current activity in the foreground */ long startTime = Calendar.getInstance().getTimeInMillis(); LogUtil.d(TAG, \"on resume base activity = \" + getLocalClassName()); mXmppController.clearXmppRequestQueueFlag(); mXmppController.clearXmppRequestSession(); if (!(getActivityContext() instanceof SSOActivity)) { //檢查multy/armor是否有換site或者換user帳號 if (shareDataContentProvider != null) { //判斷有沒有裝multy/armor 且有focus_mac,若都沒裝，就代表讀的access token/refresh token都是aishield自己的，而不是從share data來的。 if (!APPUtils.ISNULL(AppData.getData(SecurityConstant.FOCUS_MAC))) { //SHARE_DATA_URI之前已經在LoginPresenter.java 存過是要用Armor或Multy的SHARE_DATA_URI Map&lt;String, String&gt; rtnMap = shareDataContentProvider.Query(AppData.getData(SHARE_DATA_URI)); if (rtnMap != null &amp;&amp; rtnMap.size() &gt; 0) { if (rtnMap.containsKey(SecurityConstant.FOCUS_MAC) &amp;&amp; APPUtils.ISCorrectModel(rtnMap.get(SecurityConstant.MODEL_NAME))) { String focusMac = AppData.getData(SecurityConstant.FOCUS_MAC); LogUtil.d(TAG, \"AppData FocusMac:\" + focusMac + \"/multy or armor foucusMac:\" + rtnMap.get(SecurityConstant.FOCUS_MAC)); //比對app先前存的focus_mac跟share data中的Focus_mac是否相同，若相同代表Multy Armor沒換site或換帳號登入 if (rtnMap.get(SecurityConstant.FOCUS_MAC).equals(AppData.getData(SecurityConstant.FOCUS_MAC))) { //沒換site LogUtil.d(TAG, \"沒有換site\"); initView(savedInstanceState); } else { //有換site //重連 LogUtil.d(TAG, \"換site重連\"); AppData.setData(SecurityConstant.CHECK_LICENSE, \"\"); //APPUtils.clearNetworkId_DevUUID_StoreAccessToken();//清掉資料 if (mXmppController != null) { mXmppController.clearXmppRequestQueueFlag(); mXmppController.clearXmppRequestTimer(); } else { LogUtil.d(TAG, \"mXmppController is null\"); } loginPresenter = LoginPresenter.getmInstance(mWeakContext); loginPresenter.checkAccessTokenExpire(); } } else { //multy或armor沒focus site,一律用aishield自己的access token/refresh token initView(savedInstanceState); } } else { //multy或armor沒focus site,一律用aishield自己的access token/refresh token initView(savedInstanceState); } } else { //multy或armor沒focus site,一律用aishield自己的access token/refresh token initView(savedInstanceState); } } else { //multy或armor沒focus site,一律用aishield自己的access token/refresh token initView(savedInstanceState); } } long endTime = Calendar.getInstance().getTimeInMillis(); LogUtil.d(TAG, \"onResume time = \" + (endTime - startTime)); }"
  },"/pages/android/intellij_coroutine/": {
    "title": "Intellij 安裝Coroutine",
    "keywords": "",
    "url": "/pages/android/intellij_coroutine/",
    "body": "進入Project後，選File&gt;Project Structure 選Modules 按+ 選Libery&gt;From Maven 去官網查最新的coroutine的版號 把網址貼上，然後按”ok” 再按ok"
  },"/pages/android/old/app_purchase/": {
    "title": "In App Purchase Flow",
    "keywords": "",
    "url": "/pages/android/old/app_purchase/",
    "body": "1.匯入google billing Lib 1 2 3 4 dependencies { ... implementation 'com.android.billingclient:billing:2.0.3' } 2.跟Google Store進行連線 调用 newBuilder() 以创建 BillingClient 实例。您还必须调用 setListener() 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 private BillingClient billingClient; ... billingClient = BillingClient.newBuilder(activity).setListener(this).build(); billingClient.startConnection(new BillingClientStateListener() { @Override public void onBillingSetupFinished(BillingResult billingResult) { if (billingResult.getResponseCode() == BillingResponse.OK) { // The BillingClient is ready. You can query purchases here. } } @Override public void onBillingServiceDisconnected() { // Try to restart the connection on the next request to // Google Play by calling the startConnection() method. } }); 3.查詢商品 Subscription 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 List&lt;String&gt; skuList = new ArrayList&lt;&gt;(); //skuList.add(BuildConfig.SUBSCRIPTION_ITEM_1_YEAR_ID); skuList.add(BuildConfig.WSQ60_SUBSCRIPTION_ITEM_1_MONTH_ID); SkuDetailsParams.Builder params = SkuDetailsParams.newBuilder(); /** * SUBS is subscriptions type */ params.setSkusList(skuList).setType(BillingClient.SkuType.SUBS); billingClient.querySkuDetailsAsync(params.build(), new SkuDetailsResponseListener() { @Override public void onSkuDetailsResponse(BillingResult billingResult, List&lt;SkuDetails&gt; skuDetailsList) { querySubscriptionSkuDetailsArrayList = new ArrayList&lt;&gt;(); if (billingResult.getResponseCode() == BillingClient.BillingResponseCode.OK) { } } }); Consumable 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 List&lt;String&gt; skuList = new ArrayList&lt;&gt; (); skuList.add(\"com.zyxel.aishield.consumable.wsq50.1year\"); skuList.add(\"com.zyxel.aishield.consumable.wsq50.8days”); skuList.add(\"com.zyxel.aishield.consumable.wsq50.1day\"); skuList.add(\"com.zyxel.aishield.consumable.wsq50.2hours”); SkuDetailsParams.Builder params = SkuDetailsParams.newBuilder(); params.setSkusList(skuList).setType(SkuType.INAPP); billingClient.querySkuDetailsAsync(params.build(), new SkuDetailsResponseListener() { @Override public void onSkuDetailsResponse(BillingResult billingResult, List&lt;SkuDetails&gt; skuDetailsList) { // Process the result. } }); 4.選定要買的商品。購買！ 1 2 3 4 5 BillingFlowParams flowParams = BillingFlowParams.newBuilder() .setSkuDetails(skuDetails) .setAccountId(\"scott\") .build(); billingClient.launchBillingFlow((Activity) this, flowParams); 5.付款成功 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 billingClient = BillingClient.newBuilder(getApplicationContext()) .enablePendingPurchases() .setListener(new PurchasesUpdatedListener() { @Override public void onPurchasesUpdated(BillingResult billingResult, @Nullable List&lt;Purchase&gt; purchases) { LogUtil.d(TAG, \"PurchasesUpdatedListener responseCode = \" + billingResult.getResponseCode()); if (billingResult.getResponseCode() == BillingClient.BillingResponseCode.OK) { for (Purchase purchase : purchases) { handlePurchase(purchase); } } else if (billingResult.getResponseCode() == BillingResponse.USER_CANCELED) { // Handle an error caused by a user cancelling the purchase flow. } else { // Handle any other error codes. } } }).build(); 6.確認購買 确认购买交易 如果您使用的是 Google Play 结算库版本 2.0 或更高版本，则必须在三天内确认所有购买交易。如果没能正确确认，将导致系统对相应购买交易按退款处理。 您必须在授予用户权利后尽快确认通过 Google Play 结算库收到的所有处于 SUCCESS 状态的购买交易。如果您在三天内未确认购买交易，则用户会自动收到退款，并且 Google Play 会撤消该购买交易。对于待处理的交易， 您可以使用以下某种方法来确认购买交易： 对于消耗型商品，请使用客户端 API 中的 consumeAsync()。 对于非消耗型商品，请使用客户端 API 中的 acknowledgePurchase()。 还可以使用服务器 API 中新增的 acknowledge() 方法。 1 2 3 4 5 6 7 8 9 ConsumeParams consumeParams = ConsumeParams.newBuilder() .setPurchaseToken(purchase.getPurchaseToken()) .build(); billingClient.consumeAsync(consumeParams, (billingResult1, purchaseToken) -&gt; { //如果消耗型的商品購買成功 if(billingResult1.getResponseCode() == BillingClient.BillingResponseCode.OK){ }else{ } }); (2)Subscription 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 AcknowledgePurchaseParams acknowledgePurchaseParams = AcknowledgePurchaseParams.newBuilder() .setPurchaseToken(purchase.getPurchaseToken()) .setDeveloperPayload(\"scott testing developer payload\") .build(); billingClient.acknowledgePurchase(acknowledgePurchaseParams, new AcknowledgePurchaseResponseListener() { @Override public void onAcknowledgePurchaseResponse(BillingResult billingResult) { LogUtil.d(TAG, \"onAcknowledgePurchaseResponse Subscription getResponseCode = \" + billingResult.getResponseCode()); LogUtil.d(TAG, \"onAcknowledgePurchaseResponse Subscription getDebugMessage = \" + billingResult.getDebugMessage()); if(billingResult.getResponseCode() == BillingClient.BillingResponseCode.OK){ }else{ } } }); (3) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 BillingClient client = ... AcknowledgePurchaseResponseListener acknowledgePurchaseResponseListener = ... void handlePurchase(Purchase purchase) { if (purchase.getPurchaseState() == PurchaseState.PURCHASED) { // Grant entitlement to the user. ... // Acknowledge the purchase if it hasn't already been acknowledged. if (!purchase.isAcknowledged()) { AcknowledgePurchaseParams acknowledgePurchaseParams = AcknowledgePurchaseParams.newBuilder() .setPurchaseToken(purchase.getPurchaseToken()) .build(); client.acknowledgePurchase(acknowledgePurchaseParams, acknowledgePurchaseResponseListener); } } }"
  },"/pages/android/old/char/": {
    "title": "Security圖表存取資料庫的方式",
    "keywords": "",
    "url": "/pages/android/old/char/",
    "body": "程式碼1 若沒有insert過，就預設找出前30天的資料。 程式碼1#235，代入localtime的11/2號的00:00:00與現在時間 圖1 Json資料如下： 資料表Event Log 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 /** * 演算法：先移到這個禮拜的最後一天，取得這個禮拜的最後一天的日期，再往前減七天，就可以取得這個禮拜的第一天 * 再往前減一天，就取得上一個禮拜的最後一天，再往前減6天，就取得上一個禮拜的第1天。 * 再往前減一天，就取得上上一個禮拜的最後一天，再往前減6天，就取得上上一個禮拜的第1天。以此往下類推。 * * 回傳Array的格式為 * [0][0]=這個禮拜的第一天 [0][1]=這個禮拜的最後一天 * [1][0]=上禮拜的第一天 [1][1]=上禮拜的最後一天 * [2][0]=上上禮拜的第一天 [2][1]=上上禮拜的最後一天 * [3][0]=上上上禮拜的第一天 [3][1]=上上上禮拜的最後一天 * [4][0]=上上上上禮拜的第一天 [4][1]=上上上上禮拜的最後一天 * * 顯示前30天的周區間 * 假設今天是台灣時間2019/01/14，星期是日一二三四五六排序* * 回傳的week array如下 * [0]=Start Time [1]=End Time * [0][0]=2019/1/13 [0][1]=2019/1/19 * [1][0]=2019/1/06 [1][1]=2019/1/12 * [2][0]=2018/12/30 [2][1]=2019/1/05 * [3][0]=2018/12/23 [3][1]=2018/12/29 * [4][0]=2018/12/16 [4][1]=2018/12/22 * * @return */ public static long[][] get4WeekStartEnd() { long[][] weekArr = null; int weekCnt = 5;//只抓五周 Locale locale = Locale.getDefault(); TimeZone default_tz = TimeZone.getDefault(); Calendar c = Calendar.getInstance(default_tz, locale); c.set(Calendar.HOUR_OF_DAY, 23); c.set(Calendar.MINUTE, 59); c.set(Calendar.SECOND, 59); int day_of_thisWeek = c.get(Calendar.DAY_OF_WEEK);//取出今天是一個禮拜的第幾天 //參考資料http://chartsbin.com/view/41671 int first_of_thisWeek = c.getFirstDayOfWeek();//取得一個禮拜的第一天是禮拜幾(英國第一天是禮拜一，台灣第一天是禮拜天，阿富汗的第一天是禮拜六) //禮拜天-&gt;1，禮拜一-&gt;2，禮拜二-&gt;3，禮拜三-&gt;4，禮拜四-&gt;5，禮拜五-&gt;6，禮拜六-&gt;7 int between_days = SecurityConstant.WEEK_DAYS - day_of_thisWeek;//這是假設first day of week是禮拜天，若今天是禮拜二，day會回傳3 7-3=4，也就是禮拜二到禮拜六之間有四天 if (first_of_thisWeek == SecurityConstant.WEEK_DAYS) {//first day of week是禮拜六，回7 between_days -= 1; } else if (first_of_thisWeek == 2) {//first day of week是禮拜一，回2 between_days += 1; } if (between_days &gt;= 5)//若這周只過完剩下6天或7天，就顯示 weekCnt = 6;//抓六周資料 weekArr = new long[weekCnt][2]; c.add(Calendar.DAY_OF_MONTH, between_days + 1);///移到這個禮拜的最後一天再加1天(請對映演算法說明) for (int i = weekCnt - 1; i &gt;= 0; i--) {//只抓五周 c.add(Calendar.DAY_OF_MONTH, -1);//再往前減一天，就取得這個禮拜的最後一天(請對映演算法說明) weekArr[i][1] = c.getTimeInMillis() / 1000;//endtime c.set(Calendar.HOUR_OF_DAY, 0); c.set(Calendar.MINUTE, 0); c.set(Calendar.SECOND, 0); c.add(Calendar.DAY_OF_MONTH, -6);//再往前減6天，就取得這禮拜的第1天。(請對映演算法說明) weekArr[i][0] = c.getTimeInMillis() / 1000;//start time LogUtil.d(TAG, APPUtils.timestampToYMMMD(weekArr[i][1]) + \"-\" + APPUtils.timestampToYMMMD(weekArr[i][0])); } return weekArr; } 排名次的圖表 String json = “{\"start_time\":1527951600,\"end_time\":1528023600,\"query\":{\"dev-uuid\":\"550e8400-e29b-41d4-a716-446655440000\"},\"terms\":[\"client-mac\",\"event-class\"],\"ranking_size\": 10}”;"
  },"/pages/android/old/chrome_tabs/": {
    "title": "Chrome Custom Tabs",
    "keywords": "",
    "url": "/pages/android/old/chrome_tabs/",
    "body": "Android In-App Web Browser –Chrome Custom Tabs Android ChromeCustom Tabs與IOS 比較 相同點： 都有網址列 都有返回App的按鈕，Android是X，IOS是”完成” Android in-App browser也有像google chrome”加入最愛、下載、歷史…”等等相關功能 不用再打開外部瀏覽器 Custom Tabs優點 ActionBar（也就是最上面的 Toolbar，網址一欄）的顏色 Custom Tab 的進入和退出過場動畫 在Custom Tab 的 ActionBar 上添加自定義圖標和菜單 自定義返回圖標 Custom Tab 可以通過回調接口來通知應用網頁導航的情況 性能更好，使用 Custom Tab 來打開網頁的時候，還可以預先加載網頁內容，這樣當打開的時候，用戶感覺非常快。 生命週期管理，使用 Custom tab 可以和您的應用綁定一起，當用戶在瀏覽網頁的時候，您的應用也被認為是互動的程序，不會被系統殺死。 可以共享 Chrome 瀏覽器的 Cookie ，這樣用戶就不用再登錄一遍網站了。 如果用戶開啟了 Chrome 的數據壓縮功能，則一樣可以使用(???) 和 Chrome 一樣的自動補全功能(???) 只需點擊左上角的返回按鈕一次就可以返回您的應用中了 每次用的都是最新版本的 Chrome(會隨著 Chrome 更新) Custom Tab缺點 這個組件解決了 Webview 的很多問題，但它有一個關鍵的限制，就是會在頂部有個地址欄顯示 。為什麼要這麼做呢？因為 Chrome Custom Tabs 可能打開任何 Web 頁面，如果全屏顯示，會給用戶錯覺認為 Chrome Custom Tabs 打開的 Web 頁面是當前 Native App 提供的，造成安全問題。地址欄提示了用戶當前是像瀏覽器中一樣在瀏覽一個頁面。 解決Custom Tabs缺點 Trusted Web Activity(2019/02發佈) 更接近 Native App 的使用體驗，而 Chrome Custom Tabs 雖然避免了 Webview 的缺點，但是由於有地址欄，還是一個瀏覽器形式的體驗。這時候就需要用到 Trusted Web Activity了。 TWA(Trusted Web Activity) 是在 Chrome Custom Tabs 的基礎上，使用Digital AssetLinks來對 Web 內容進行鑑權，限制 TWA 中展示的 Web 內容與 Native App 為相同的作者，保證了安全性。它的優點： 基於 Custom Tabs，會隨 Chrome 自動更新 全屏幕，不會顯示地址欄。 Getting Started with Trusted Web Activities https://codelabs.developers.google.com/codelabs/getting-started-with-twas/index.html?index=..%2F..index#0 Chrome Custom Tabs 官方提供的Sample Code https://github.com/GoogleChrome/custom-tabs-client 首先在gradle的dependencies加上 implementation 'com.android.support:customtabs:28.0.0' 啟動Chrome Custom Tabs 1 2 3 4 5 6 7 8 9 public class MainActivity extends AppCompatActivity { @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); CustomTabsIntent.Builder intentBuilder = new CustomTabsIntent.Builder(); intentBuilder.build().launchUrl(this, Uri.parse(\"https://paul.kinlan.me/\")); } } Toolbar增加顏色 1 2 3 CustomTabsIntent.Builder intentBuilder = new CustomTabsIntent.Builder(); intentBuilder.setToolbarColor(Color.parseColor(\"#980e03\")); intentBuilder.build().launchUrl(this, Uri.parse(\"https://paul.kinlan.me/\")); Toolbar Close Button換圖 1 2 3 4 5 CustomTabsIntent.Builder intentBuilder = new CustomTabsIntent.Builder(); intentBuilder.setToolbarColor(Color.parseColor(\"#980e03\")); intentBuilder.setCloseButtonIcon( BitmapFactory.decodeResource(getResources(), R.drawable.ic_arrow_back)); intentBuilder.build().launchUrl(this, Uri.parse(\"https://paul.kinlan.me/\")); 增加一個Send Mail的Action Button 1 2 3 4 5 6 7 8 CustomTabsIntent.Builder builder = new CustomTabsIntent.Builder(); Intent actionIntent = new Intent(Intent.ACTION_SEND); actionIntent.setType(\"*/*\"); actionIntent.putExtra(Intent.EXTRA_EMAIL, \"example@example.com\"); actionIntent.putExtra(Intent.EXTRA_SUBJECT, \"example\"); PendingIntent pi = PendingIntent.getActivity(this, 0, actionIntent, 0); Bitmap icon = BitmapFactory.decodeResource(getResources(), android.R.drawable.ic_dialog_email); builder.setActionButton(icon, \"send email\", pi, true); 增加Menu 1 2 3 4 5 6 7 CustomTabsIntent.Builder builder = new CustomTabsIntent.Builder(); Intent menuIntent = new Intent(); menuIntent.setClass(getApplicationContext(), Main2Activity.class); PendingIntent pi2 = PendingIntent.getActivity(getApplicationContext(), 0, menuIntent, 0); builder.addMenuItem(\"Menu entry 2\", pi2); builder.addMenuItem(\"Menu entry 3\", pi2); builder.addMenuItem(\"Menu entry 4\", pi2); 進階功能(目前沒用過) 參考Demohttps://github.com/GoogleChrome/custom-tabs-client ServiceConnectionActivity.java CustomTabsClient.bindCustomTabsService（Context context，String packageName，CustomTabsServiceConnection connection）函數來綁定到CustomTabsService，綁定成功後，在通過CustomTabsClient.warmup（long flags）函數來預加載Chrome，這些Chrome會加載一些基本控件，這樣當 打開的時候速度就會比較快;還可以通過CustomTabsClient.newSession（CustomTabsCallback回調）函數來獲取一個自定義標籤的回話，在Callback中可以監聽該回話的導航操作，比如導航是失敗了還是成功了。"
  },"/pages/android/old/google_sign_in/": {
    "title": "Google Sign-In",
    "keywords": "",
    "url": "/pages/android/old/google_sign_in/",
    "body": "建立設定 1.先至Google APIS 新增專案。 2.先進入此網址 https://developers.google.com/identity/sign-in/android/start-integrating 點擊Configure a project 3.選擇你剛才建的專案 4.選擇Android 5.輸入你的keystore的sha-1以及package Name 6.把credentials.json下載下來，放置在你的project_folder/app目錄下 7.Gradle加上以下內容 1 2 3 4 5 6 apply plugin: 'com.android.application' ... dependencies { implementation 'com.google.android.gms:play-services-auth:17.0.0' } 8.KeyStore的資訊也要加進Gradle(十分重要，不要run的時候會有Error) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 android { signingConfigs { signed { storeFile file(\"/Users/cici/android-release.keystore\") storePassword 'zyxelzyxel' keyAlias 'android-app' keyPassword 'zyxelzyxel' } } buildTypes { release { debuggable true minifyEnabled false signingConfig signingConfigs.signed } debug { signingConfig signingConfigs.signed debuggable true } } } 進入整合Google Sign IN 1.在OnCreate加上以下這段 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 public class MainActivity extends AppCompatActivity { GoogleSignInClient mGoogleSignInClient; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); GoogleSignInOptions gso = new GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN) .requestEmail() .build(); mGoogleSignInClient = GoogleSignIn.getClient(this, gso); } } 2.建一個Sign In button以及Logout button 1 2 3 4 5 6 7 8 9 10 &lt;com.google.android.gms.common.SignInButton android:id=\"@+id/sign_in_button\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" /&gt; &lt;Button android:id=\"@+id/logout\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:text=“Logout”&gt; Code裡面增加 1 2 3 4 5 SignInButton signInButton = findViewById(R.id.sign_in_button); signInButton.setSize(SignInButton.SIZE_STANDARD); findViewById(R.id.sign_in_button).setOnClickListener(this); logoutBtn = findViewById(R.id.logout); logoutBtn.setOnClickListener(this); 1 2 3 4 5 6 7 8 9 10 11 @Override public void onClick(View v) { switch (v.getId()) { case R.id.sign_in_button: signIn();//登入 break; case R.id.logout: LogOut();//登出 break; } } 3.Sign In 1 2 3 4 5 int RC_SIGN_IN = 8989; private void signIn() { Intent signInIntent = mGoogleSignInClient.getSignInIntent(); startActivityForResult(signInIntent, RC_SIGN_IN); } (1)After the user signs in, you can get a GoogleSignInAccount object for the user in the activity’s onActivityResult method. 登入後，透過OnActivityResult()可以取得GoogleSignInAccount物件 1 2 3 4 5 6 7 8 9 10 11 @Override public void onActivityResult(int requestCode, int resultCode, Intent data) { super.onActivityResult(requestCode, resultCode, data); // Result returned from launching the Intent from GoogleSignInClient.getSignInIntent(...); if (requestCode == RC_SIGN_IN) { // The Task returned from this call is always completed, no need to attach // a listener. Task&lt;GoogleSignInAccount&gt; task = GoogleSignIn.getSignedInAccountFromIntent(data); handleSignInResult(task); } } (2)The GoogleSignInAccount object contains information about the signed-in user, such as the user’s name. GoogleSignInAccount物件包含登入過後的使用者資訊 1 2 3 4 5 6 7 8 9 10 11 12 13 14 private void handleSignInResult(Task&lt;GoogleSignInAccount&gt; completedTask) { try { GoogleSignInAccount account = completedTask.getResult(ApiException.class); String idToken = account.getIdToken(); Log.d(TAG, \"handleSignInResult: idToken:\"+idToken); // Signed in successfully, show authenticated UI. updateUI(account); } catch (ApiException e) { // The ApiException status code indicates the detailed failure reason. // Please refer to the GoogleSignInStatusCodes class reference for more information. Log.w(TAG, \"signInResult:failed code=\" + e.getStatusCode()); updateUI(null); } } (3)取得使用者資訊在UI上呈現 1 2 3 4 5 6 7 8 9 10 11 12 13 private void updateUI(GoogleSignInAccount account){ Log.d(TAG,\"account:\"+account.toString()); GoogleSignInAccount acct = GoogleSignIn.getLastSignedInAccount(this); if (acct != null) { String personName = acct.getDisplayName(); String personGivenName = acct.getGivenName(); String personFamilyName = acct.getFamilyName(); String personEmail = acct.getEmail(); String personId = acct.getId(); Uri personPhoto = acct.getPhotoUrl(); Log.d(TAG, \"updateUI: personName:\"+personName+\"/personGivenName:\"+personGivenName+\"/personEmail:\"+personEmail); } } 4.Logout 1 2 3 4 5 6 7 8 9 10 private void LogOut() { mGoogleSignInClient.signOut() .addOnCompleteListener(this, new OnCompleteListener&lt;Void&gt;() { @Override public void onComplete(@NonNull Task&lt;Void&gt; task) { // ... Log.d(TAG, \"onComplete: logout\"); } }); } 5.OnStart() 透過onStart()，可以檢查user是否登入，若登入過，就把GoogleSignInAccount的物件傳到UI呈現。 1 2 3 4 5 6 7 8 @Override protected void onStart() { super.onStart(); // Check for existing Google Sign In account, if the user is already signed in // the GoogleSignInAccount will be non-null. GoogleSignInAccount account = GoogleSignIn.getLastSignedInAccount(this); updateUI(account); } 6.使用Web Client ID(不使用credentials.json的狀況) GoogleSignInOptions gso = new GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN) .requestIdToken(“558740131695-mpgk6rctv01ve056neruglk2anl3vb5k.apps.googleusercontent.com”) .requestEmail() .build(); 參考文件： https://developers.google.com/identity/sign-in/android/start-integrating https://developers.google.com/identity/sign-in/android/sign-in https://medium.com/@alif.valutac/how-to-fix-error-10-google-sign-in-problem-410cba2a9735"
  },"/pages/android/old/theme_change/": {
    "title": "Theme Change",
    "keywords": "",
    "url": "/pages/android/old/theme_change/",
    "body": "參考教學網頁 https://blog.xujiaji.com/post/android-skin https://github.com/burgessjp/ThemeSkinning 1.匯入skinlibrary implementation 'com.solid.skin:skinlibrary:2.0.0' 2.讓你的 Application 繼承於 SkinBaseApplication import solid.ren.skinlibrary.SkinConfig; import solid.ren.skinlibrary.base.SkinBaseApplication; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 public class App extends SkinBaseApplication { private static Context context; @Override public void onCreate() { super.onCreate(); SkinConfig.setCanChangeStatusColor(true); SkinConfig.setCanChangeFont(true); SkinConfig.setDebug(true); // SkinConfig.addSupportAttr(\"tabLayoutIndicator\", new TabLayoutIndicatorAttr()); // SkinConfig.addSupportAttr(\"button\", new RadioButtonAttr()); // SkinConfig.addSupportAttr(\"itemIconTint\", new NavigationViewArr()); // SkinConfig.addSupportAttr(\"tl_textSelectColor\", new CommonTabLayoutArr()); // SkinConfig.addSupportAttr(\"tl_textUnselectColor\", new CommonTabLayoutArr()); // SkinConfig.addSupportAttr(\"tl_mipmaps_select\", new CommonTabLayoutArr()); // SkinConfig.addSupportAttr(\"tl_mipmaps_unselect\", new CommonTabLayoutArr()); SkinConfig.enableGlobalSkinApply(); // LeakCanary.install(this); context = getApplicationContext(); } public static Context getAppContext() { return App.context; } } 3.讓你的 Activity 繼承於 SkinBaseActivity，如果使用了 Fragment 則繼承於 SkinBaseFragment 1 2 3 4 public abstract class BaseActivity extends SkinBaseActivity { } public abstract class BaseFragment extends SkinBaseFragment { } 4.繼承的SkinBaseFragment是support.v4 import android.support.v4.app.Fragment; 所以在BaseActivity中fragmentManager要支援 supportFragmentManager(); //fragmentManager = getFragmentManager(); fragmentManager = getSupportFragmentManager(); 5.在需要換膚的根佈局上添加 xmlns:skin=”http://schemas.android.com/android/skin” ，然後在需要換膚的View上加上 skin:enable=”true” 6.新建一個項目模組（只包含有資源文件,例如本項目的 skinpackage 模組），其中包含的資源文件的 name 一定要和原項目中有換膚需求的 View 所使用的資源name一致。 7.拿到上一步生成的文件( ×××.apk )，改名為 ×××.skin，放入 assets 中的 skin 目錄下（ skin 目錄是自己新建的） 8.調用換膚 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 SkinManager.getInstance().loadSkin(\"pink0730.skin\", new SkinLoaderListener() { @Override public void onStart() { Log.i(\"SkinLoaderListener\", \"正在切换中\"); //dialog.show(); } @Override public void onSuccess() { Log.i(\"SkinLoaderListener\", \"切换成功\"); initView(); } @Override public void onFailed(String errMsg) { Log.i(\"SkinLoaderListener\", \"切换失败:\" + errMsg); } @Override public void onProgress(int progress) { Log.i(\"SkinLoaderListener\", \"皮肤文件下载中:\" + progress); } } ); 9.回到預設skin 1 SkinManager.getInstance().restoreDefaultTheme(); 10.ImageView注意事項 1 2 3 4 5 6 7 8 9 &lt;ImageView android:id=\"@+id/imageView\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:layout_marginStart=\"8dp\" android:layout_marginTop=\"8dp\" android:layout_marginEnd=\"8dp\" android:src=\"@drawable/house\" /&gt; 不支援 app:srcCompat=”@drawable/house” 11.程式中動態換skin 目前支援三種 1 2 3 4 5 public interface ThemeAttr { String background = \"background\"; String textColor = \"textColor\"; String src = \"src\"; } 例如：dynamicAddView(mDiagnoseText, ThemeAttr.textColor, R.color.color_b2b2b2); 12.若是Adapter，需把activity的Context代入，才能程式中換skin 1 ((SkinBaseActivity) context).dynamicAddView(textView, ThemeAttr.textColor, R.color.default_text_description_color); 13.遇到的問題Glide 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 /** * 使用glide加載圖片,For Change Theme * * @param rid drawable resource id * @param view imageview */ public static void loadToImageViewWithTheme(int rid, ImageView view) { Glide.with(Utils.getContext()).load(getImgByteArr(rid)).into(new GlideDrawableImageViewTarget(view)); } public static byte[] getImgByteArr(int rid){ SkinManager skinManager = SkinManager.getInstance(); String resName = Utils.getContext().getResources().getResourceEntryName(rid); int theme_res_id = skinManager.getResources().getIdentifier(resName,\"drawable\",skinManager.getCurSkinPackageName()); Bitmap bmp = BitmapFactory.decodeResource(skinManager.getResources(), theme_res_id); ByteArrayOutputStream baos = new ByteArrayOutputStream(); bmp.compress(Bitmap.CompressFormat.PNG, 100, baos); return baos.toByteArray(); } 14.目前無法Change的項目 1 public class MultyDeviceAdapter extends PagerAdapter {}"
  },"/pages/android/adb/": {
    "title": "ADB",
    "keywords": "",
    "url": "/pages/android/adb/",
    "body": "在終端機輸入以下 cd ~/ touch .bash_profile open .bash_profile 打開Android Studio-&gt;File-&gt;Preferences中，搜尋輸入sdk，點選Android SDK 把/Users/cici/Library/Android/sdk 這段複製起來 在.bash_profile輸入以下，記得export要小寫 export ANDROID_HOME=/Users/cici/Library/Android/sdk export PATH=${PATH}:${ANDROID_HOME}/tools export PATH=${PATH}:${ANDROID_HOME}/platform-tools 上一張圖儲存後，輸入source .bash_profile 輸入adb 如下圖 打開AndroidStudio 按Build-&gt;Build Bundle-&gt;Build APKs 點擊locate 產生的位置如下，也可以選取app-debug.apk，按option鍵，拷貝位置 /Users/cici/AndroidStudioProjects/MyApplication2/app/build/outputs/apk/debug/app-debug.apk 打開終端機 cd /Users/cici/AndroidStudioProjects/MyApplication2/app/build/outputs/apk/debug/ 再來adb install -g app-debug.apk 用-g是官方說，這樣可以使用permission"
  },"/pages/android/kdoc/": {
    "title": "kdoc",
    "keywords": "",
    "url": "/pages/android/kdoc/",
    "body": "kotlin在as沒辦法生成@param解決方法 下載kdoc 在Preferences-&gt;Plugins-&gt;搜尋kdoc 如下圖，選擇install 參考 https://stackoverflow.com/questions/40574195/generate-kdoc-for-methods-in-android-studio"
  },"/pages/android/old/code_share/": {
    "title": "code sharing",
    "keywords": "",
    "url": "/pages/android/old/code_share/",
    "body": "Design Patten: Oberseve觀察者模式 CallBack模式 MVP(Model-View-Presenter) MVP(Model-View-Presenter) View : 負責繪製UI元素，簡單來說就是Activity以及Fragment。 View interface : 需要View的實現接口，View 通過View interface 與 Presenter進行交互，降低耦合，方便進行單元測試。 Model : 負責儲存、搜尋、操作資料數據(有時候也會實現一個Model interface用來降低耦合)。 Presenter : 作為View與Model交互的橋樑，處理與用戶對應的邏輯功能。 MVP優點 MVP的P把所有與用戶對應的邏輯都集中在這裡，所以可以透過MOCK一個View及Model來測試P。降低程式耦合性。 讓架構更清楚了解，其實最大的好處是方便測試和移植 MVP： View不直接與Model交互，而是通過與Presenter交互來與Model間接交互 Presenter與View的交互是通過接口來進行的，更有利於添加單元測試 通常View與Presenter是一對一的，但複雜的View可能綁定多個Presenter來處理邏輯 這樣的話，Activity的工作變簡單了，只用來響應生命週期，其他工作都丟到Presenter中去完成。 Code: View Interface 1 2 3 4 5 6 7 8 public interface LoginView extends BaseView{ void goToLoginPage(); void goToMainPage(); void goToDownloadMultyPage(); void goToStorePage(); void goToBuyLicense(); void goToBuyMultyPage(); } View(Activity) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 public abstract class BaseActivity extends AppCompatActivity implements IObserver, LoginView{ @Override protected void onResume() { loginPresenter = new LoginPresenter(context); loginPresenter.checkAccessTokenExpire(); } @Override public void goToLoginPage() { Intent ssoIntent = new Intent(Intent.ACTION_VIEW, Uri.parse(SecurityConstant.SSO_LOGIN)); startActivity(ssoIntent); finish(); } @Override public void goToMainPage() { LogUtil.d(TAG, \"回到主頁面\"); Intent intent = new Intent(this, MainActivity.class); startActivity(intent); finish(); } @Override public void goToDownloadMultyPage() { Intent intent = new Intent(this, InstallMultyActivity.class); startActivity(intent); finish(); } @Override public void goToStorePage() { Intent intent = new Intent(this, DeepLinkActivity.class); startActivity(intent); finish(); } @Override public void goToBuyLicense() { Intent intent = new Intent(this, NoLicense.class); startActivity(intent); finish(); } @Override public void goToBuyMultyPage() { Intent intent = new Intent(this, BuyMultyActivity.class); startActivity(intent); finish(); } } Precenter 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 public class LoginPresenter implements IObserver { private static LoginPresenter mInstance; public static LoginPresenter getmInstance(WeakReference&lt;Context&gt; context){ if(mInstance == null) { synchronized (LoginPresenter.class) { if (mInstance == null) { mInstance = new LoginPresenter(context); } } } return mInstance; } private LoginPresenter(WeakReference&lt;Context&gt; context) { mWeakContext = context; mContext = context.get(); loginView = (LoginView) context.get(); } public void checkAccessTokenExpire() { getTokenData(); String access_token = AppData.getData(SecurityConstant.ACCESS_TOKEN); String refresh_token = AppData.getData(SecurityConstant.REFRESH_TOKEN); String access_token_timestamp = AppData.getData(SecurityConstant.ACCESS_TIMESTAMP); if (access_token != null &amp;&amp; !\"\".equals(access_token) &amp;&amp; refresh_token != null &amp;&amp; !\"\".equals(refresh_token) &amp;&amp; access_token_timestamp != null &amp;&amp; !access_token_timestamp.equals(\"\")) { ....... } else { if (refresh_token != null &amp;&amp; !\"\".equals(refresh_token)) { ssoApi.getAccessTokenWithRefreshToken(refresh_token); } else { //開啟登入頁面 loginView.goToLoginPage(); } } } } Observe觀察者模式 「訂閱」後就能自動收到更新通知 的概念， 即是 觀察者模式 (Observer Pattern)。 那些被訂閱、被追蹤、被觀察的，稱為 — 主題/目標 (Subject) 而對主題感興趣的我們，則是 — 觀察者 (Observer) Code 觀察者介面 1 2 3 public interface IObserver { void eventNotify(Context activity, IEvent eventType, String eventMsg); } 通知者Notifier 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 public class Notifier { private static Notifier mInstance; private Looper mLooper; private List&lt;WeakReference&lt;?&gt;&gt; observerList; public static Notifier getmInstance() { if (mInstance == null) { synchronized (Notifier.class) { if (mInstance == null) { mInstance = new Notifier(); } } } return mInstance; } private Notifier(){ observerList = new ArrayList&lt;&gt;(); RefWatcher refWatcher = MyApplication.getRefWatcher(MyApplication.getAppContext()); refWatcher.watch(this); } public void addObserver(WeakReference&lt;?&gt; observer){ if(observerList!=null) { if(!observerList.contains(observer)) observerList.add(observer); } } public void removeObserver(IObserver observer){ if(observerList!=null) { if(observerList.contains(observer)) observerList.remove(observer); } } private static class MyHandler extends Handler { private Looper mLooper; public MyHandler(Looper looper) { super(looper); mLooper = looper; } public MyHandler(){ super(); } @Override public void handleMessage(Message msg) { super.handleMessage(msg); } } public void notifyEvent(final WeakReference&lt;?&gt; activity, final IEvent event, final String msg){ Looper.prepare(); MyHandler myHandler = null; if(activity.get() instanceof Activity) { myHandler = new MyHandler(Looper.getMainLooper()); }else{ myHandler = new MyHandler(); } if(observerList.contains(activity)){ MyRunnable runnable = new MyRunnable(activity,event,msg); if(runnable !=null) { myHandler.post(runnable); } } Looper.loop(); } public static class MyRunnable implements Runnable { private WeakReference&lt;?&gt; activityRef; private IEvent mEvent; private String mMsg; public MyRunnable(WeakReference&lt;?&gt; activity,IEvent event,String msg) { activityRef = activity; mEvent = event; mMsg = msg; } public void run() { IObserver o = (IObserver) activityRef.get(); o.eventNotify((Context) o,mEvent, mMsg); } } } 觀察者實作 Okhttp Callback function GetEndDeviceListPrecenter BaseActivity 1 2 3 4 5 6 7 8 9 10 11 public enum ToolbarType { TOOLBAR,//沒側邊選單的toolbar DRAWER_TOOLBAR,//有側邊選單的toolbar NONE;//沒有任何一個toolbar } public abstract class BaseActivity extends AppCompatActivity { abstract int getLayoutId(); abstract void initView(Bundle savedInstanceState); abstract Context getActivityContext(); abstract ToolbarType getToolbarType(); } 繼承BaseActivity(實作抽象方法) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 public class NoLicense extends BaseActivity { private static final String TAG = \"NoLicense\"; @BindView(R.id.renew_btn) Button renewBtn; @BindView(R.id.no_license_title) TextView noLicenseTitle; @Override int getLayoutId() { return R.layout.activity_no_license; } @Override void initView(Bundle savedInstanceState) { ButterKnife.bind(this); fontChanger.replaceFonts((ViewGroup) findViewById(android.R.id.content)); fontChangerBold.replaceFonts(renewBtn); fontChangerBold.replaceFonts(noLicenseTitle); } @Override Context getActivityContext() { return this; } @Override ToolbarType getToolbarType() { return ToolbarType.DRAWER_TOOLBAR; } @OnClick(R.id.renew_btn) public void onViewClicked() { Intent intent = new Intent(this, DeepLinkActivity.class); startActivity(intent); finish(); } } BaseActivity繼承的兒子都可以用的public abstract class BaseActivity extends AppCompatActivity implements IObserver, LoginView { private static String TAG = \"BaseActivity\"; protected XmppController mXmppController; protected XmppConnectionPresenter mXmppConnectionPresenter; protected PushNotificationPresenter mPushNotificationPresenter; protected FontChangeCrawler fontChanger; protected FontChangeCrawler fontChangerBold; protected ImageButton menu_home_btn, menu_profile_btn, menu_dev_btn, menu_security_btn; protected Bundle savedInstanceState; private static WeakReference&lt;Context&gt; mContextWeakReference; @Override public void onBackPressed() { if (getActivityContext() instanceof MainActivity) { super.onBackPressed(); } else if (getToolbarType() == ToolbarType.DRAWER_TOOLBAR) {//是主要四個頁面 Intent intent = new Intent(getActivityContext(), MainActivity.class); startActivity(intent); finish(); } else if (getToolbarType() == ToolbarType.TOOLBAR || getToolbarType() == ToolbarType.NONE) { super.onBackPressed(); } } protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(getLayoutId()); this.savedInstanceState = savedInstanceState; mContextWeakReference = new WeakReference&lt;Context&gt;(this); //檢查網路 int connectionType = APPUtils.checkConnectionType(this); if (connectionType == 0) { HttpError(EnumError.NO_INTERNET_CONNECTION, \"network error\"); } Notifier.getmInstance().addObserver(this); mXmppController = XmppController.getmInstance(mContextWeakReference.get()); mXmppConnectionPresenter = XmppConnectionPresenter.getmInstance(mContextWeakReference.get()); fontChanger = new FontChangeCrawler(getAssets(), \"fonts/GOTHIC.TTF\"); fontChangerBold = new FontChangeCrawler(getAssets(), \"fonts/GOTHICB.TTF\"); //判斷是否有toolbar switch (getToolbarType()) { case DRAWER_TOOLBAR: getDrawerToolBarSetting(); getMenuList(); break; case TOOLBAR: getNoDrawerToolbarSetting(); break; case NONE: break; default: break; } // initView(savedInstanceState); } @Override protected void onDestroy() { super.onDestroy(); dismissLoadView(); } protected Toolbar getToolBarSetting() { return toolbar; } private void getNoDrawerToolbarSetting() { toolbar = findViewById(R.id.my_toolbar); if (toolbar != null) { setSupportActionBar(toolbar); ActionBar actionBar = getSupportActionBar(); // Enable the Up button actionBar.setDisplayHomeAsUpEnabled(true); //actionBar.setTitle(R.string.activate); getSupportActionBar().setDisplayShowTitleEnabled(false); getSupportActionBar().setHomeAsUpIndicator(R.drawable.all_btn_a_back_0); toolbar.setNavigationOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { onBackPressed(); } }); } } private void getDrawerToolBarSetting() { toolbar = (Toolbar) findViewById(R.id.toolbar); setSupportActionBar(toolbar); //toolbar.setTitleTextColor(Color.parseColor(\"#ffffff\")); DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout); ActionBarDrawerToggle toggle = new ActionBarDrawerToggle( this, drawer, toolbar, R.string.navigation_drawer_open, R.string.navigation_drawer_close); drawer.addDrawerListener(toggle); toggle.syncState(); // 在Toolbar做最左边加上导航按钮 getSupportActionBar().setTitle(\"\"); getSupportActionBar().setDisplayHomeAsUpEnabled(true); getSupportActionBar().setHomeAsUpIndicator(R.drawable.homefirewall_image_android_b_menu); getSupportActionBar().setHomeButtonEnabled(true); drawer.setLayoutDirection(View.LAYOUT_DIRECTION_LTR); } private void getMenuList() { ListView mListView = findViewById(R.id.menu_list); String[] menuArray = getResources().getStringArray(R.array.menuArray); int[] resIdArray = {R.drawable.g1_logo_a_help_0, R.drawable.icon_forum, R.drawable.g1_logo_a_feedback_0, R.drawable.icon_notification, R.drawable.g1_logo_a_faq_0}; mListView.setAdapter(new MenuAdapter(this, menuArray, resIdArray)); HttpApi httpApi = new HttpApi(mContextWeakReference.get()); mListView.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView&lt;?&gt; parent, View view, int position, long id) { if (getActivityContext() != null) { switch (position) { case 0: Intent FAQActivityIntent = new Intent(getActivityContext(), FAQActivity.class); startActivity(FAQActivityIntent); finish(); break; case 1: Intent ForumActivityIntent = new Intent(getActivityContext(), ForumActivity.class); startActivity(ForumActivityIntent); finish(); break; case 2://send feedback LogUtil.d(TAG,\"here....1\"); mSendFeedBackPresenter.getDownloadURL_XMPP_APP_LogFile(); break; case 3: //取得license過期的狀態 SettingRepo settingRepo = new SettingRepo(); String status = settingRepo.getSetting(SecurityConstant.IS_Expire); LogUtil.d(TAG, \"expired status:\" + status); if (status != null) { ExpireStatus expireStatus = ExpireStatus.fromStr(status); //過期後，點擊直接導 到noLicenseActivity if (expireStatus == ExpireStatus.YES) { } else { Intent NotificationIntent = new Intent(getActivityContext(), NotificationSettingActivity.class); startActivity(NotificationIntent); finish(); } } break; case 4: // get a list of running processes and iterate through them ActivityManager am = (ActivityManager) getSystemService(ACTIVITY_SERVICE); // get the info from the currently running task List&lt;ActivityManager.RunningTaskInfo&gt; taskInfo = am.getRunningTasks(1); LogUtil.d(TAG, \"CURRENT Activity ::\" + taskInfo.get(0).topActivity.getClassName()); Intent browserIntent = new Intent(Intent.ACTION_VIEW, Uri.parse(\"https://www.zyxel.com/AiShieldDeploy/\")); startActivity(browserIntent); break; } } else { LogUtil.d(TAG, \"onItemClick: getActivityContext() is null\"); } } }); //下方menui設定 BottomMenuSetting(); } protected void BottomMenuSetting() { menu_home_btn = findViewById(R.id.menu_home_btn); if (menu_home_btn != null) { menu_home_btn.setOnClickListener(view -&gt; { ActivityManager am = (ActivityManager) getApplicationContext().getSystemService(Context.ACTIVITY_SERVICE); ComponentName cn = am.getRunningTasks(1).get(0).topActivity; LogUtil.d(TAG, \"current activity = \" + cn.getClassName()); if (cn.getClassName().equalsIgnoreCase(\"zyxel.security.MainActivity\")) { } else { Intent intent0 = new Intent(getActivityContext(), MainActivity.class); startActivity(intent0); finish(); } }); } menu_security_btn = findViewById(R.id.menu_security_btn); if (menu_security_btn != null) { menu_security_btn.setOnClickListener(view -&gt; { if (getActivityContext() instanceof TimeChartActivity) { //如果目前的activity是timechartactivity，就不再導入timechart activity } else { Intent intent0 = new Intent(getActivityContext(), TimeChartActivity.class); startActivity(intent0); finish(); } }); } menu_profile_btn = findViewById(R.id.menu_profile_btn); if (menu_profile_btn != null) { menu_profile_btn.setOnClickListener(view -&gt; { ActivityManager am = (ActivityManager) getApplicationContext().getSystemService(Context.ACTIVITY_SERVICE); ComponentName cn = am.getRunningTasks(1).get(0).topActivity; LogUtil.d(TAG, \"current activity = \" + cn.getClassName()); if (cn.getClassName().equalsIgnoreCase(\"zyxel.security.AccessControlActivity\")) { } else { Intent intent0 = new Intent(getActivityContext(), AccessControlActivity.class); startActivity(intent0); finish(); } }); } menu_dev_btn = findViewById(R.id.menu_dev_btn); if (menu_dev_btn != null) { menu_dev_btn.setOnClickListener(view -&gt; { if (getActivityContext() instanceof DeviceListActivity) { //如果目前的activity是DeviceListActivity，就不再導入DeviceListActivity } else { Intent intent0 = new Intent(getActivityContext(), DeviceListActivity.class); startActivity(intent0); finish(); } }); } if (getActivityContext() instanceof MainActivity) { menu_home_btn.setImageResource(R.drawable.homefirewall_image_android_b_dashboard_select); } else if (getActivityContext() instanceof TimeChartActivity) { menu_security_btn.setImageResource(R.drawable.homefirewall_image_android_b_secutity_select); } else if (getActivityContext() instanceof DeviceListActivity) { menu_dev_btn.setImageResource(R.drawable.homefirewall_image_android_b_devicelist_select); } else if (getActivityContext() instanceof AccessControlActivity) { menu_profile_btn.setImageResource(R.drawable.homefirewall_image_android_b_accesscontrol_select); } //取得license過期的狀態 SettingRepo settingRepo = new SettingRepo(); String status = settingRepo.getSetting(SecurityConstant.IS_Expire); LogUtil.d(TAG, \"expired status:\" + status); if (status != null) { ExpireStatus expireStatus = ExpireStatus.fromStr(status); //過期後，點擊直接導 到noLicenseActivity if (expireStatus == ExpireStatus.YES) { if (menu_home_btn != null) { menu_home_btn.setOnClickListener(view -&gt; { // if (getActivityContext() instanceof NoLicense) { // // } else { // Intent intent0 = new Intent(getActivityContext(), NoLicense.class); // startActivity(intent0); // finish(); // } Intent intent0 = new Intent(getActivityContext(), MainActivity.class); startActivity(intent0); finish(); }); } //過期後，點擊直接導 到OopsActivity if (menu_profile_btn != null) { menu_profile_btn.setOnClickListener(view -&gt; { Intent intent0 = new Intent(getActivityContext(), OopsActivity.class); intent0.putExtra(\"from\", AccessControlActivity.class.getSimpleName()); startActivity(intent0); finish(); }); } //過期後，點擊直接導 到OopsActivity if (menu_dev_btn != null) { menu_dev_btn.setOnClickListener(view -&gt; { Intent intent0 = new Intent(getActivityContext(), OopsActivity.class); intent0.putExtra(\"from\", DeviceListActivity.class.getSimpleName()); startActivity(intent0); finish(); }); } //menu下方四個按鈕的圖片顯示被選取 if (getActivityContext() instanceof NoLicense) { if (menu_home_btn != null) menu_home_btn.setImageResource(R.drawable.homefirewall_image_android_b_dashboard_select); } else if (getActivityContext() instanceof TimeChartActivity) { if (menu_security_btn != null) menu_security_btn.setImageResource(R.drawable.homefirewall_image_android_b_secutity_select); } else if (getActivityContext() instanceof OopsActivity) { String from = getIntent().getStringExtra(\"from\"); if (from.equals(AccessControlActivity.class.getSimpleName())) { if (menu_profile_btn != null) menu_profile_btn.setImageResource(R.drawable.homefirewall_image_android_b_accesscontrol_select); } else if (from.equals(DeviceListActivity.class.getSimpleName())) { if (menu_dev_btn != null) menu_dev_btn.setImageResource(R.drawable.homefirewall_image_android_b_devicelist_select); } } //如果目前頁面是AccessControl,DeviceList,DeviceDetail就導頁到OopsActivity，因為已經過期了，不能瀏覽原本頁面 if (getActivityContext() instanceof AccessControlActivity) { Intent intent0 = new Intent(getActivityContext(), OopsActivity.class); intent0.putExtra(\"from\", AccessControlActivity.class.getSimpleName()); startActivity(intent0); finish(); } if (getActivityContext() instanceof DeviceListActivity || getActivityContext() instanceof DeviceDetailActivity) { Intent intent0 = new Intent(getActivityContext(), OopsActivity.class); intent0.putExtra(\"from\", DeviceListActivity.class.getSimpleName()); startActivity(intent0); finish(); } } } } /** * 顯示Load View * 因BaseView也有定義showLoadView，都是呼叫BaseActivity的showLoadView()，但Inteface預設定義method是public */ public void showLoadView() { View view = getRootView(); if (progressWindow == null) { progressWindow = new ProgressWindow(getActivityContext(), view); } if (!progressWindow.isShowing()) view.post(() -&gt; { progressWindow.show(); }); } /** * 關閉Load View */ public void dismissLoadView() { try { if (progressWindow != null &amp;&amp; progressWindow.isShowing()) { progressWindow.dismissWindow(); } } catch (Exception e) { e.printStackTrace(); } } public void HttpError(EnumError error_code, String errorMsg) { Log.d(TAG, \"Error Activity: \" + getActivityContext()); String msg = \"\"; try { JSONObject jsonObject = new JSONObject(errorMsg); msg = jsonObject.getString(\"message\"); } catch (JSONException e) { APPUtils.printStack(e); msg = errorMsg; } LogUtil.d(TAG, \"error msg:\" + msg); LogUtil.d(TAG, \"error code:\" + error_code); Intent intent = new Intent(getActivityContext(), ErrorPageActivity.class); intent.putExtra(SecurityConstant.ERR_MSG, msg); intent.putExtra(SecurityConstant.ERR_CODE, error_code); startActivity(intent); finish(); } @Subscribe public void receivedXmppEvent(NotifyXmppEvent notifyXmppEvent) { LogUtil.getmInstance(getActivityContext()).d(TAG, \"Bass Otto Event xmpp event = \" + notifyXmppEvent.getRequestType() + \" --&gt; \" + notifyXmppEvent.getResponseCode()); switch (notifyXmppEvent.getRequestType()) { case CONNECTED_TO_XMPP_SERVER: break; case DISCONNECTED_FROM_XMPP_SERVER: LogUtil.d(TAG, \"receivedXmppEvent: disconnect\"); case TIMEOUT: LogUtil.d(TAG, \"xmpp timeout\"); case ERROR: dismissLoadView(); try { String errorType = (String) notifyXmppEvent.responseData; LogUtil.d(TAG, \"XMPP ERROR Type = \" + errorType); LogUtil.d(TAG, \"xmpp error\"); if (errorType.equals(\"wait\")) { goToErrorPage(EnumError.MULTY_OFFLINE, \"xmpp error\"); } else { goToErrorPage(EnumError.SERVER_ERROR, \"xmpp error\"); } } catch (Exception e) { e.printStackTrace(); goToErrorPage(EnumError.SERVER_ERROR, \"xmpp error\"); } break; case CONNECTION_ERROR: myHandler.postDelayed(reconnectingRunnable, 1000); break; } } Runnable reconnectingRunnable = new Runnable() { @Override public void run() { LogUtil.d(TAG, \"reconnectingRunnable !!\"); LogUtil.d(TAG, \"is login = \" + AppConfigs.isLogin); if (APPUtils.checkConnectionType(getApplicationContext()) != 0) { mXmppConnectionPresenter.connectWithSSO(); } else { if (isConnectInternetDialogShow == false) { isConnectInternetDialogShow = true; AlertDialog alertDialog = alertWithCallback(R.string.alert_network).setNegativeButton(R.string.alert_confirm, (dialog, which) -&gt; { isConnectInternetDialogShow = false; myHandler.postDelayed(reconnectingRunnable, 3000); }).create(); alertDialog.show(); } } } }; } ShareData Gradle 1 buildConfigField \"String\", \"MULTY_CONTENT_PROVIDER\", '\"content://com.zyxel.multyx.provider/aishield\"' 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 public class MultyContentProvider { private static final String TAG = \"MultyContentProvider\"; private Context context; private ContentResolver resolver; private Uri uri = Uri.parse(BuildConfig.MULTY_CONTENT_PROVIDER); public MultyContentProvider(Context context) { this.context = context; resolver = context.getContentResolver(); } public Map&lt;String,String&gt; Query() { try { String[] fields = new String[]{\"_id\", \"mac\", \"model_name\", \"access_token\", \"refresh_token\", \"expired_timestamp\"};//sql select 欄位 Cursor cursor = resolver.query(uri, fields, null, null, null); if (cursor != null) { Map&lt;String, String&gt; rtnMap = new HashMap&lt;&gt;(); cursor.moveToFirst(); String id = null; for (int i = 0; i &lt; cursor.getCount(); i++) { id = cursor.getString(0); LogUtil.d(TAG, \"shared data id = \" + cursor.getString(0)); LogUtil.d(TAG, \"shared data mac = \" + cursor.getString(1)); LogUtil.d(TAG, \"model name = \" + cursor.getString(2)); LogUtil.d(TAG, \"shared data access token = \" + cursor.getString(3)); LogUtil.d(TAG, \"shared data refresh token = \" + cursor.getString(4)); LogUtil.d(TAG, \"shared data expired timestamp = \" + cursor.getString(5)); rtnMap.put(SecurityConstant.MULTY_ID, cursor.getString(0)); rtnMap.put(SecurityConstant.FOCUS_MAC, cursor.getString(1)); rtnMap.put(SecurityConstant.MULTY_MODEL, cursor.getString(2)); rtnMap.put(SecurityConstant.ACCESS_TOKEN, cursor.getString(3)); rtnMap.put(SecurityConstant.REFRESH_TOKEN, cursor.getString(4)); rtnMap.put(SecurityConstant.ACCESS_TIMESTAMP, cursor.getString(5)); // AppData.setData(SecurityConstant.MULTY_ID,cursor.getString(0)); // AppData.setData(SecurityConstant.FOCUS_MAC,cursor.getString(1)); // AppData.setData(SecurityConstant.MULTY_MODEL,cursor.getString(2)); // // AppData.setData(SecurityConstant.MULTY_ACCESS_TOKEN,cursor.getString(3)); // AppData.setData(SecurityConstant.MULTY_REFRESH_TOKEN,cursor.getString(4)); // AppData.setData(SecurityConstant.MULTY_ACCESS_TIMESTAMP,cursor.getString(5)); //cursor.moveToNext(); } cursor.close(); cursor.setNotificationUri(context.getContentResolver(), uri); return rtnMap; } } catch (Exception e) { APPUtils.printStack(e); } return null; } public void Update(String id,String access_token,String refresh_token,String expired_timestamp) { try { if (APPUtils.ISNULL(id) &amp;&amp; APPUtils.ISNULL(id) &amp;&amp; APPUtils.ISNULL(id) &amp;&amp; APPUtils.ISNULL(id)) { LogUtil.d(TAG,\"id/access_token/refresh_token/expired_timestamp is null.please check it out.\"); }else{ ContentValues newRow = new ContentValues(); newRow.put(\"access_token\", access_token); newRow.put(\"refresh_token\", refresh_token); newRow.put(\"expired_timestamp\", expired_timestamp); StringBuffer where = new StringBuffer(\"_id= ? \"); String[] whereArg = {id}; resolver.update(uri, newRow, where.toString(), whereArg); } } catch (Exception e) { APPUtils.printStack(e); } //resolver.insert(uri, newRow); // } } Open Store Front End Activity:DeepLinkActivity.java ObjectStorage Step1:取得Site Name(從ObjectStorage)，若沒有site name用預設 Xmpp Step2:取得xmpp連線(若已經連過，就不用連) Step3:取得network id(若已經取得過，就不用再取) Setp4:取得Store Access Token Cloud Step5:將取得Store Access Token及Site name帶入，並判斷型號 WSQ50 store_url = BuildConfig.STORE_BASE_URL +”x/licenses?redirect_uri=aishieldxx://aihost/login&amp;access_token=” + storeAccessToken + “&amp;locale=”+ Locale.getDefault().getLanguage() +”&amp;site_name=”+site_name; WSQ60 store_url = BuildConfig.STORE_BASE_URL + “plus/licenses?redirect_uri=aishieldxx://aihost/login&amp;access_token=” + storeAccessToken + “&amp;locale=”+ Locale.getDefault().getLanguage()” +”&amp;site_name=”+site_name; Step6:url encoding Step7:打開網頁 1 2 3 4 5 6 CustomTabsIntent.Builder builder = new CustomTabsIntent.Builder(); CustomTabsIntent customTabsIntent = builder.build(); customTabsIntent.intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP); if (cnt == 0) { customTabsIntent.launchUrl(this, Uri.parse(store_url)); } Xmpp Step8:觸發Smart Polling 購買完，按下x的按鈕或WebStroe “Done”的按鈕。 到TransActivity Step9:觸發Smart Polling Step10:清掉cache，導到License處理中的Activity License Process Activity Step11:判斷是否有處理中的License(Processing=True), 若有的話，五秒後再問一遍，直到沒有處理中的Lincese 1 new Handler().postDelayed(() -&gt; httpApi.getExpirationStatus(AppData.getData(SecurityConstant.STORE_ACCESS_TOKEN)), 5000); Xmpp Step12:若沒有處理中的License(Processing==False),觸發Once Polling Step13:判斷ExpirationStatus的api中，若expire_date是null或空的，但process是false代表，已經處理完但Portal過期，接下來問Device有沒有過期 若Device回過期，就導致NoLicese的頁面, 若Device回沒過期，就5秒後繼續問expirationStatus的api(回到Step11) Step14:若expire_date有值且大於今天代表potal沒過期，詢問device有沒有過期。若expire_date是小於今天，代表potal過期，回到Step13的步驟。 若Device回過期，就5秒後繼續問expirationStatus的api(回到Step11) 若Device回沒過期，就導到MainPage 以下是完整的Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 @Override void initView(Bundle savedInstanceState) { httpApi.getExpirationStatus(AppData.getData(SecurityConstant.STORE_ACCESS_TOKEN)); } @Override public void eventNotify(Context activity, IEvent eventType, String eventMsg) { if (!LicenseProcessActivity.this.isFinishing()) {//若activity沒有被finish才做 super.eventNotify(activity, eventType, eventMsg); if (activity != this) { // 不相等就不做事 return; } if (eventType instanceof HttpEvent) { HttpEvent event = (HttpEvent) eventType; switch (event) { case GET_EXPIRE_STATUS: try { JSONObject json = new JSONObject(eventMsg); expire_date_str = json.getString(\"expired_at\"); processing = json.getBoolean(\"processing\"); } catch (JSONException e) { e.printStackTrace(); } LogUtil.d(TAG, \"processing:\" + processing); LogUtil.d(TAG, \"expire_date_str:\" + expire_date_str); if (processing) {//有正在處理中，5秒後再來問 new Handler().postDelayed(() -&gt; httpApi.getExpirationStatus(AppData.getData(SecurityConstant.STORE_ACCESS_TOKEN)), 5000); } else { mXmppController.setStoreOncePolling(); } break; } } } } @Subscribe public void receivedXmppEvent(NotifyXmppEvent notifyXmppEvent) { if (!LicenseProcessActivity.this.isFinishing()) {//若activity沒有被finish才做 super.receivedXmppEvent(notifyXmppEvent); dismissLoadView(); LogUtil.d(TAG, \"Otto Event xmpp event = \" + notifyXmppEvent.getRequestType() + \" --&gt; \" + notifyXmppEvent.getResponseCode()); try { switch (notifyXmppEvent.getRequestType()) { case SET_STORE_ONCE_POLLING: //null就是potal過期了 if (expire_date_str.equals(\"null\") || \"\".equals(expire_date_str)) { isPortalLicenseExpired = true;//Portal過期了 mXmppController.getCyberSecurityInfo(false);//判斷device有沒有過期,用false是因為不要再讀cache } else { Date expire_date = APPUtils.fromISO8601UTCSSS(expire_date_str); TimeZone tz = TimeZone.getTimeZone(\"UTC\"); Calendar cal = Calendar.getInstance(tz); long utc_now = cal.getTimeInMillis() / 1000L; if ((expire_date.getTime() / 1000) &lt;= utc_now) { //過期了 isPortalLicenseExpired = true;//Portal過期了 mXmppController.getCyberSecurityInfo(false);//判斷device有沒有過期,用false是因為不要再讀cache } else { //沒過期 isPortalLicenseExpired = false;//Portal沒過期 mXmppController.getCyberSecurityInfo(false);//判斷device有沒有過期,用false是因為不要再讀cache } } break; case GET_CYBER_SECURITY_INFO: StructCyberSecurity structCyberSecurity = (StructCyberSecurity) notifyXmppEvent.getresponseData(); if (!structCyberSecurity.getStatus().equals(EnumSecurityFeatureStatus.ENUM_ENABLED)) {//device過期 LogUtil.d(TAG, \"device過期:\"); if (isPortalLicenseExpired) {//portal過期 LogUtil.d(TAG, \"portal過期:\"); settingRepo.insertUpdateSetting(SecurityConstant.IS_Expire, ExpireStatus.YES.value()); Intent intent = new Intent(this, NoLicense.class); startActivity(intent); finish(); } else { LogUtil.d(TAG, \"portal沒過過期:\"); //portal沒過期 new Handler().postDelayed(() -&gt; httpApi.getExpirationStatus(AppData.getData(SecurityConstant.STORE_ACCESS_TOKEN)), 5000);//五秒後再次重新判斷 } } else {//device沒過期 LogUtil.d(TAG, \"device沒過期:\"); //potal過期,device沒過期,視同沒過期 //potal沒過期，device沒過期，視同沒過期 settingRepo.insertUpdateSetting(SecurityConstant.IS_Expire, ExpireStatus.NO.value()); Intent intent = new Intent(this, MainActivity.class); startActivity(intent); finish(); } break; } } catch (Exception e) { e.printStackTrace(); } } } MainActivity(判斷Licnese) Xmpp Step1:GET_CyberSecurityInfo詢問Device有沒有過期。並把Device過期的結果存在手機的資料庫中。 1 2 3 4 5 if (!structCyberSecurity.getStatus().equals(EnumSecurityFeatureStatus.ENUM_ENABLED)) { settingRepo.insertUpdateSetting(SecurityConstant.IS_Expire, ExpireStatus.YES.value()); } else { settingRepo.insertUpdateSetting(SecurityConstant.IS_Expire, ExpireStatus.NO.value()); } Step2:GET_NETWORK_ID(並且存入multy50/60型號(若呼叫過，則不call zap) Step3:GET_STORE_ACCESS_TOKEN,若Store Access Token是空的，要導到error page Step4:get Credentilas Step5:GET_DEV_UUID 若是取不到的話，就用舊的(ps:之前有針對這個做判斷，若取不到就error page，經討論後，取不到就是用之前舊的dev uuid，最糟的狀況就是取不到就是空) Cloud Step6:若Device過期就導到No License，沒過期才做以下步驟 Step7:先判斷License有沒有在處理中(Processing == True or False) True處理中：將頁面導回License處理中的Actvity False處理完：呼叫v1/licenses/expiration_date Step8: 請參考 https://docs.google.com/document/d/1F4onqD-4eiooJ0U7xyqVK2jC51l2jgmC-XNUN8c8ku8/edit# 登入 判斷有沒有Multy， 若有multy判斷Multy的Token有沒有以及Focus site 若沒有，Aishield就自已開瀏覽器登入 取得user info 取得PCloud paired Device Multy存在 判斷Pcloud paired Device的Mac跟focus Mac是否一樣 型號是否相同 若Step4沒有找到的話 找出Pcolud Paired的Device,型號為WSQ50/60，並且數量只有一台，就以用xmpp連到這個device Paired Device數量超過2台(含)以上，就跳出error(no support model),以前是直接導到下載multy 若Pcloud沒任何Paired過的device就跳出請安裝Multy的頁面。 GetEndDeviceListPrecenter.java"
  },"/pages/android/old/momery_leak/": {
    "title": "Handle Memory Leak",
    "keywords": "",
    "url": "/pages/android/old/momery_leak/",
    "body": "偵測memory leak的工具 LeakCanary Eclipse MAT Android Studio Profiler 參考以下篇章修改防止momery leak洩漏。 https://android.jlelse.eu/9-ways-to-avoid-memory-leaks-in-android-b6d81648e35e https://www.jianshu.com/p/4036a7a84296 Memory leak的觸發點 AiShield ShowLoadingView 建立一個PopWindowHandler OnCreate initPopupWindow Destroy removeCallbacksAndMessages,參考此篇http://lp43.blogspot.com/2011/11/memory-leak-drawable.html Eclipse MAT 參考文章：https://blog.csdn.net/CrazyMo_/article/details/80214205 無法克服的memoryLeak 1.OkHttp(因為用匿名) 2.Service LocalBinder https://stackoverflow.com/questions/6733538/memory-leaks-found-when-local-binder-has-a-reference-to-service https://stackoverflow.com/questions/7976322/binder-preventing-garbage-collection 3.Singleton 宣告static 參考：http://hant.ask.helplib.com/java/post_5038000 目前作法在GetEndDevicePrecenter中增加destroy() 其它引用GetEndDevicePrecenter 記得在onResume 去呼叫建立 onPause 去呼叫destroy() 參考文章 https://stackoverflow.com/questions/34409549/release-memory-of-particular-activity-when-it-is-destroyed Bitmap的recycle Android的強迫Garbage Collector方式 最後 其它資料 AsyncTask,Handler,Thread,TimerTask,CountDownTimer, https://www.youtube.com/watch?v=RqyF7qzA4qc&amp;list=LL5DL2LYd3m82-JE01-VhfBw&amp;index=4&amp;t=0s 參考連結: https://www.jianshu.com/p/c5ac51d804fa https://www.jianshu.com/p/63aead89f3b9 https://www.jianshu.com/p/ac00e370f83d https://blog.csdn.net/snow4dev/article/details/7555130 https://stackoverflow.com/questions/9809336/android-asyntask-use-weak-reference-for-context-to-avoid-device-rotate-screen/9809870 http://frankwu-coding.logdown.com/posts/230591-androidhandlermemory-leak https://instabug.com/blog/how-to-fix-android-memory-leaks/ https://www.androiddesignpatterns.com/2013/01/inner-class-handler-memory-leak.html https://stackoverflow.com/questions/17778456/static-runnable-in-activity https://stackoverflow.com/questions/13891186/static-singleton-lifetime-in-android/13891253#13891253 https://blog.csdn.net/CrazyMo_/article/details/80214205 https://www.jianshu.com/p/ea5278f92173 https://juejin.im/post/595615d1f265da6c261d3bc1 https://juejin.im/post/5955f556f265da6c4e7f5330"
  },"/pages/android/old/security_info/": {
    "title": "GET_CYBER_SECURITY_INFO",
    "keywords": "",
    "url": "/pages/android/old/security_info/",
    "body": "此API主要記錄 Policy_id Profile_Index 被阻擋的App List 被阻擋的WebCategory List 被阻擋/信任的Domain List 被阻擋的KeyWord List 結構如下： 1.Policy_id與Profile_Index 2.被阻擋的App List 3.被阻擋的WebCategory 4.被阻擋KeyWord，跟(阻檔/信任)的Domain WebCategory&amp;APP. ID/High/Low/Mid/Custom對映 1.WebCateogry(圖有錯，應是High/Mid/Low/Custom) 2.App WebCategory 翻譯相關的Code TableName:WEB_CATEGORY_INFO 主要記錄那些APP要被BLOCK與WEB Cateogry要被Block 1 2 select name,name_tw,name_pt,name_fr,name_es,name_it,name_de,name_ru from web_category_info select description,description_tw,description_pt,description_fr,description_es,description_it,description_de,description_ru from web_category_info APPUtils.java Code的說明 1.取得language(程式碼1#1778) 2.判斷language，並塞入相對映的翻譯到TextView 程式碼1 GET_SECURITY_STATUS 此API可以取出APP的Usage: 1.mDailyUsage提供前31天(含今天)每天的app使用量，mAppId來代表是那個App,mUsed代表使用量(單位:分鐘)。 2.提供31天的資料 3.mWeeklyUsage提供四周的App使用量"
  },"/pages/android/android_note/": {
    "title": "Android note",
    "keywords": "",
    "url": "/pages/android/android_note/",
    "body": "取得TAG MainActivity.class.getSimpleName() alt+F7 Find usage shit二次尋找 網路測試 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 private class NetworkTestTask extends AsyncTask&lt;Void, Void, Boolean&gt; { @Override protected Boolean doInBackground(Void... voids) { try (Socket socket = new Socket(\"localhost\", 8555)) { Log.d(\"NETWORK\", \"模拟器网络正常\"); return true; } catch (IOException e) { Log.e(\"NETWORK\", \"模拟器无法访问RTSP端口: \" + e.getMessage()); return false; } } @Override protected void onPostExecute(Boolean success) { if (success) { Toast.makeText(MainActivity.this, \"网络测试通过\", Toast.LENGTH_SHORT).show(); } else { Toast.makeText(MainActivity.this, \"网络测试失败\", Toast.LENGTH_SHORT).show(); } } } // 在 onCreate() 中调用 new NetworkTestTask().execute(); 1 2 3 4 5 6 7 8 9 new Thread(() -&gt; { try (Socket socket = new Socket(\"localhost\", 8555)) { Log.d(\"NETWORK\", \"模拟器网络正常\"); runOnUiThread(() -&gt; Toast.makeText(MainActivity.this, \"网络正常\", Toast.LENGTH_SHORT).show()); } catch (IOException e) { Log.e(\"NETWORK\", \"模拟器无法访问RTSP端口: \" + e.getMessage()); runOnUiThread(() -&gt; Toast.makeText(MainActivity.this, \"网络失败: \" + e.getMessage(), Toast.LENGTH_SHORT).show()); } }).start(); // 1. 添加依赖（build.gradle） implementation “org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.4” // 2. 在 Activity 中使用 1 2 3 4 5 6 7 8 9 10 11 12 13 lifecycleScope.launch(Dispatchers.IO) { try { Socket(\"localhost\", 8555).use { socket -&gt; withContext(Dispatchers.Main) { Toast.makeText(this@MainActivity, \"网络正常\", Toast.LENGTH_SHORT).show() } } } catch (e: IOException) { withContext(Dispatchers.Main) { Toast.makeText(this@MainActivity, \"网络失败: ${e.message}\", Toast.LENGTH_SHORT).show() } } } 與 Native (C/C++) 互動時 在 NDK 開發中，當 C/C++ 需要通知 Java 層更新 UI，通常會透過 JNI 呼叫 Java 方法，而 Handler 可以幫助你在 UI Thread 上執行更新。 Looper 和 MessageQueue 的運作機制 如果你的應用程式中有 長時間運行的 Thread，例如 自訂的背景執行緒，你可能需要讓該執行緒擁有自己的 Looper 來處理訊息，這時候 Handler 就很有用。 HandlerThread 如果你想要在單獨的背景執行緒處理特定的工作，但不想要每次都創建新執行緒，HandlerThread 是很好的選擇。這在影像處理、音訊處理或某些與 NDK 相關的計算 時可能會派上用場。 不過，如果你的目標是寫現代化的 Android 應用程式，而不是處理 NDK 或特殊場景，那麼建議你 優先學習 Kotlin Coroutines，因為它的可讀性更高，而且能更簡潔地處理異步操作。 runOnUiThread() 與 new Handler().post() 的區別 這兩種方法都是在 Android 中將代碼切換到主線程(UI 線程)執行的方法，但它們有一些重要區別： 主要區別 所屬類別不同 runOnUiThread() 是 Activity 類的方法 new Handler().post() 是 Handler 類的方法 當前線程檢查 runOnUiThread() 會先檢查當前是否已在 UI 線程，如果是則直接執行，否則通過 Handler 發送到 UI 線程 new Handler().post() 總是將 Runnable 發送到消息隊列，即使當前已在 UI 線程 使用場景 runOnUiThread() 通常在 Activity 或 Fragment 中使用更方便 new Handler().post() 可以在任何有 Context 的地方使用 性能考量 如果已經在 UI 線程，runOnUiThread() 會直接執行而不通過消息隊列，效率更高 new Handler().post() 總是通過消息隊列，即使已在 UI 線程 示例代碼 java 复制 // runOnUiThread() 用法 runOnUiThread(new Runnable() { @Override public void run() { // 更新 UI } }); // Handler.post() 用法 new Handler(Looper.getMainLooper()).post(new Runnable() { @Override public void run() { // 更新 UI } }); 選擇建議 在 Activity 或 Fragment 中優先使用 runOnUiThread()，因為更簡潔且可能更高效 在非 Activity 類中或需要更精確控制時使用 Handler.post() 如果代碼可能在 UI 線程或非 UI 線程運行，runOnUiThread() 是更好的選擇"
  },"/pages/android/kapt_err/": {
    "title": "kaptGenerateStubsDebugKotlin task (current target is 17) jvm target",
    "keywords": "",
    "url": "/pages/android/kapt_err/",
    "body": "kaptGenerateStubsDebugKotlin task (current target is 17) jvm target 'compileDebugJavaWithJavac' task (current target is 1.8) and 'kaptGenerateStubsDebugKotlin' task (current target is 17) jvm target 參考網址 https://stackoverflow.com/questions/75650195/build-error-kspdebugkotlin-task-current-target-is-17/75916224#75916224 要填上以下的紅色字在 plugins { id 'com.android.application' id 'org.jetbrains.kotlin.android' id 'kotlin-android' id 'kotlin-kapt' } dependencies { //dagger var dagger_version = \"2.46.1\" implementation \"com.google.dagger:dagger:$dagger_version\" kapt \"com.google.dagger:dagger-compiler:$dagger_version\" } 把以下這堆全放置在build.gradle(Project:My_Application) allprojects { tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach { kotlinOptions { jvmTarget = \"1.8\" } } }"
  },"/pages/android/android_thread/": {
    "title": "Android thread",
    "keywords": "",
    "url": "/pages/android/android_thread/",
    "body": "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 private Handler handler; @Override protected void onCreate(Bundle savedInstanceState) { handler = new Handler() { @Override public void handleMessage(@NonNull Message msg) { super.handleMessage(msg); switch (msg.what) { case 1: Toast.makeText(MainActivity.this, \"test\", Toast.LENGTH_SHORT).show(); Log.e(TAG,\"handler test\"); break; } } }; new Thread() { @Override public void run() { super.run(); Message message = new Message(); message.what = 1; handler.sendMessage(message); } }.start(); new Thread(new Runnable() { @Override public void run() { runOnUiThread(new Runnable() { @Override public void run() { Toast.makeText(MainActivity.this, \"ui Test\", Toast.LENGTH_SHORT).show(); Log.e(TAG,\"ui Thread Test\"); } }); } }).start(); }"
  }}
